{"ast":null,"code":"import _regeneratorRuntime from \"/Users/atakan/Documents/Web Development/Udemy/Crash Course - Full Stack Web with React App/Projects/React - Today I Learned/today-i-learned/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/atakan/Documents/Web Development/Udemy/Crash Course - Full Stack Web with React App/Projects/React - Today I Learned/today-i-learned/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/atakan/Documents/Web Development/Udemy/Crash Course - Full Stack Web with React App/Projects/React - Today I Learned/today-i-learned/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport GoTrueAdminApi from './GoTrueAdminApi';\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants';\nimport { AuthImplicitGrantRedirectError, AuthInvalidCredentialsError, AuthRetryableFetchError, AuthSessionMissingError, AuthUnknownError, isAuthApiError, isAuthError } from './lib/errors';\nimport { _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch';\nimport { decodeJWTPayload, Deferred, getItemAsync, getParameterByName, isBrowser, removeItemAsync, resolveFetch, setItemAsync, uuid, retryable, sleep } from './lib/helpers';\nimport localStorageAdapter from './lib/local-storage';\nimport { polyfillGlobalThis } from './lib/polyfills';\npolyfillGlobalThis(); // Make \"globalThis\" available\nvar DEFAULT_OPTIONS = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS\n};\n/** Current session will be checked for refresh at this interval. */\nvar AUTO_REFRESH_TICK_DURATION = 10 * 1000;\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nvar AUTO_REFRESH_TICK_THRESHOLD = 3;\nvar GoTrueClient = /*#__PURE__*/function () {\n  /**\n   * Create a new client for use in the browser.\n   */\n  function GoTrueClient(options) {\n    var _this = this;\n    _classCallCheck(this, GoTrueClient);\n    this.stateChangeEmitters = new Map();\n    this.autoRefreshTicker = null;\n    this.visibilityChangedCallback = null;\n    this.refreshingDeferred = null;\n    /**\n     * Keeps track of the async client initialization.\n     * When null or not yet resolved the auth state is `unknown`\n     * Once resolved the the auth state is known and it's save to call any further client methods.\n     * Keep extra care to never reject or throw uncaught errors\n     */\n    this.initializePromise = null;\n    this.detectSessionInUrl = true;\n    /**\n     * Used to broadcast state change events to other tabs listening.\n     */\n    this.broadcastChannel = null;\n    var settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.inMemorySession = null;\n    this.storageKey = settings.storageKey;\n    this.autoRefreshToken = settings.autoRefreshToken;\n    this.persistSession = settings.persistSession;\n    this.storage = settings.storage || localStorageAdapter;\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch\n    });\n    this.url = settings.url;\n    this.headers = settings.headers;\n    this.fetch = resolveFetch(settings.fetch);\n    this.detectSessionInUrl = settings.detectSessionInUrl;\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this)\n    };\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n      this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);\n      this.broadcastChannel.addEventListener('message', function (event) {\n        _this._notifyAllSubscribers(event.data.event, event.data.session, false); // broadcast = false so we don't get an endless loop of messages\n      });\n    }\n\n    this.initialize();\n  }\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  _createClass(GoTrueClient, [{\n    key: \"initialize\",\n    value: function initialize() {\n      if (!this.initializePromise) {\n        this.initializePromise = this._initialize();\n      }\n      return this.initializePromise;\n    }\n    /**\n     * IMPORTANT:\n     * 1. Never throw in this method, as it is called from the constructor\n     * 2. Never return a session from this method as it would be cached over\n     *    the whole lifetime of the client\n     */\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$this$_getSessi, data, error, session, redirectType;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.initializePromise) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", this.initializePromise);\n            case 2:\n              _context.prev = 2;\n              if (!(this.detectSessionInUrl && this._isImplicitGrantFlow())) {\n                _context.next = 19;\n                break;\n              }\n              _context.next = 6;\n              return this._getSessionFromUrl();\n            case 6:\n              _yield$this$_getSessi = _context.sent;\n              data = _yield$this$_getSessi.data;\n              error = _yield$this$_getSessi.error;\n              if (!error) {\n                _context.next = 13;\n                break;\n              }\n              _context.next = 12;\n              return this._removeSession();\n            case 12:\n              return _context.abrupt(\"return\", {\n                error: error\n              });\n            case 13:\n              session = data.session, redirectType = data.redirectType;\n              _context.next = 16;\n              return this._saveSession(session);\n            case 16:\n              this._notifyAllSubscribers('SIGNED_IN', session);\n              if (redirectType === 'recovery') {\n                this._notifyAllSubscribers('PASSWORD_RECOVERY', session);\n              }\n              return _context.abrupt(\"return\", {\n                error: null\n              });\n            case 19:\n              _context.next = 21;\n              return this._recoverAndRefresh();\n            case 21:\n              return _context.abrupt(\"return\", {\n                error: null\n              });\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](2);\n              if (!isAuthError(_context.t0)) {\n                _context.next = 28;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                error: _context.t0\n              });\n            case 28:\n              return _context.abrupt(\"return\", {\n                error: new AuthUnknownError('Unexpected error during initialization', _context.t0)\n              });\n            case 29:\n              _context.prev = 29;\n              _context.next = 32;\n              return this._handleVisibilityChange();\n            case 32:\n              return _context.finish(29);\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 24, 29, 33]]);\n      }));\n    }\n    /**\n     * Creates a new user.\n     *\n     * Be aware that if a user account exists in the system you may get back an\n     * error message that attempts to hide this information from the user.\n     *\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\n     * @returns A user if the server has \"autoconfirm\" OFF\n     */\n  }, {\n    key: \"signUp\",\n    value: function signUp(credentials) {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var res, email, password, options, phone, _password, _options, _res, data, error, session, user;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return this._removeSession();\n            case 3:\n              if (!('email' in credentials)) {\n                _context2.next = 10;\n                break;\n              }\n              email = credentials.email, password = credentials.password, options = credentials.options;\n              _context2.next = 7;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/signup\"), {\n                headers: this.headers,\n                redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n                body: {\n                  email: email,\n                  password: password,\n                  data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n                  gotrue_meta_security: {\n                    captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n                  }\n                },\n                xform: _sessionResponse\n              });\n            case 7:\n              res = _context2.sent;\n              _context2.next = 18;\n              break;\n            case 10:\n              if (!('phone' in credentials)) {\n                _context2.next = 17;\n                break;\n              }\n              phone = credentials.phone, _password = credentials.password, _options = credentials.options;\n              _context2.next = 14;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/signup\"), {\n                headers: this.headers,\n                body: {\n                  phone: phone,\n                  password: _password,\n                  data: (_b = _options === null || _options === void 0 ? void 0 : _options.data) !== null && _b !== void 0 ? _b : {},\n                  gotrue_meta_security: {\n                    captcha_token: _options === null || _options === void 0 ? void 0 : _options.captchaToken\n                  }\n                },\n                xform: _sessionResponse\n              });\n            case 14:\n              res = _context2.sent;\n              _context2.next = 18;\n              break;\n            case 17:\n              throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n            case 18:\n              _res = res, data = _res.data, error = _res.error;\n              if (!(error || !data)) {\n                _context2.next = 21;\n                break;\n              }\n              return _context2.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: error\n              });\n            case 21:\n              session = data.session;\n              user = data.user;\n              if (!data.session) {\n                _context2.next = 27;\n                break;\n              }\n              _context2.next = 26;\n              return this._saveSession(data.session);\n            case 26:\n              this._notifyAllSubscribers('SIGNED_IN', session);\n            case 27:\n              return _context2.abrupt(\"return\", {\n                data: {\n                  user: user,\n                  session: session\n                },\n                error: null\n              });\n            case 30:\n              _context2.prev = 30;\n              _context2.t0 = _context2[\"catch\"](0);\n              if (!isAuthError(_context2.t0)) {\n                _context2.next = 34;\n                break;\n              }\n              return _context2.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: _context2.t0\n              });\n            case 34:\n              throw _context2.t0;\n            case 35:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 30]]);\n      }));\n    }\n    /**\n     * Log in an existing user with an email and password or phone and password.\n     *\n     * Be aware that you may get back an error message that will not distingish\n     * between the cases where the account does not exist or that the\n     * email/phone and password combination is wrong or that the account can only\n     * be accessed via social login.\n     */\n  }, {\n    key: \"signInWithPassword\",\n    value: function signInWithPassword(credentials) {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var res, email, password, options, phone, _password2, _options2, _res2, data, error;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _context3.next = 3;\n              return this._removeSession();\n            case 3:\n              if (!('email' in credentials)) {\n                _context3.next = 10;\n                break;\n              }\n              email = credentials.email, password = credentials.password, options = credentials.options;\n              _context3.next = 7;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/token?grant_type=password\"), {\n                headers: this.headers,\n                body: {\n                  email: email,\n                  password: password,\n                  data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n                  gotrue_meta_security: {\n                    captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n                  }\n                },\n                xform: _sessionResponse\n              });\n            case 7:\n              res = _context3.sent;\n              _context3.next = 18;\n              break;\n            case 10:\n              if (!('phone' in credentials)) {\n                _context3.next = 17;\n                break;\n              }\n              phone = credentials.phone, _password2 = credentials.password, _options2 = credentials.options;\n              _context3.next = 14;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/token?grant_type=password\"), {\n                headers: this.headers,\n                body: {\n                  phone: phone,\n                  password: _password2,\n                  data: (_b = _options2 === null || _options2 === void 0 ? void 0 : _options2.data) !== null && _b !== void 0 ? _b : {},\n                  gotrue_meta_security: {\n                    captcha_token: _options2 === null || _options2 === void 0 ? void 0 : _options2.captchaToken\n                  }\n                },\n                xform: _sessionResponse\n              });\n            case 14:\n              res = _context3.sent;\n              _context3.next = 18;\n              break;\n            case 17:\n              throw new AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\n            case 18:\n              _res2 = res, data = _res2.data, error = _res2.error;\n              if (!(error || !data)) {\n                _context3.next = 21;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: error\n              });\n            case 21:\n              if (!data.session) {\n                _context3.next = 25;\n                break;\n              }\n              _context3.next = 24;\n              return this._saveSession(data.session);\n            case 24:\n              this._notifyAllSubscribers('SIGNED_IN', data.session);\n            case 25:\n              return _context3.abrupt(\"return\", {\n                data: data,\n                error: error\n              });\n            case 28:\n              _context3.prev = 28;\n              _context3.t0 = _context3[\"catch\"](0);\n              if (!isAuthError(_context3.t0)) {\n                _context3.next = 32;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: _context3.t0\n              });\n            case 32:\n              throw _context3.t0;\n            case 33:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 28]]);\n      }));\n    }\n    /**\n     * Log in an existing user via a third-party provider.\n     */\n  }, {\n    key: \"signInWithOAuth\",\n    value: function signInWithOAuth(credentials) {\n      var _a, _b, _c, _d;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this._removeSession();\n            case 2:\n              return _context4.abrupt(\"return\", this._handleProviderSignIn(credentials.provider, {\n                redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\n                scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\n                queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\n                skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect\n              }));\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * Allows signing in with an ID token issued by certain supported providers.\n     * The ID token is verified for validity and a new session is established.\n     *\n     * @experimental\n     */\n  }, {\n    key: \"signInWithIdToken\",\n    value: function signInWithIdToken(credentials) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var options, provider, token, nonce, res, data, error;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this._removeSession();\n            case 2:\n              _context5.prev = 2;\n              options = credentials.options, provider = credentials.provider, token = credentials.token, nonce = credentials.nonce;\n              _context5.next = 6;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/token?grant_type=id_token\"), {\n                headers: this.headers,\n                body: {\n                  provider: provider,\n                  id_token: token,\n                  nonce: nonce,\n                  gotrue_meta_security: {\n                    captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n                  }\n                },\n                xform: _sessionResponse\n              });\n            case 6:\n              res = _context5.sent;\n              data = res.data, error = res.error;\n              if (!(error || !data)) {\n                _context5.next = 10;\n                break;\n              }\n              return _context5.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: error\n              });\n            case 10:\n              if (!data.session) {\n                _context5.next = 14;\n                break;\n              }\n              _context5.next = 13;\n              return this._saveSession(data.session);\n            case 13:\n              this._notifyAllSubscribers('SIGNED_IN', data.session);\n            case 14:\n              return _context5.abrupt(\"return\", {\n                data: data,\n                error: error\n              });\n            case 17:\n              _context5.prev = 17;\n              _context5.t0 = _context5[\"catch\"](2);\n              if (!isAuthError(_context5.t0)) {\n                _context5.next = 21;\n                break;\n              }\n              return _context5.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: _context5.t0\n              });\n            case 21:\n              throw _context5.t0;\n            case 22:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[2, 17]]);\n      }));\n    }\n    /**\n     * Log in a user using magiclink or a one-time password (OTP).\n     *\n     * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n     * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n     * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n     *\n     * Be aware that you may get back an error message that will not distinguish\n     * between the cases where the account does not exist or, that the account\n     * can only be accessed via social login.\n     */\n  }, {\n    key: \"signInWithOtp\",\n    value: function signInWithOtp(credentials) {\n      var _a, _b, _c, _d;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var email, options, _yield$_request, error, phone, _options3, _yield$_request2, _error;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return this._removeSession();\n            case 3:\n              if (!('email' in credentials)) {\n                _context6.next = 10;\n                break;\n              }\n              email = credentials.email, options = credentials.options;\n              _context6.next = 7;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/otp\"), {\n                headers: this.headers,\n                body: {\n                  email: email,\n                  data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\n                  create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,\n                  gotrue_meta_security: {\n                    captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken\n                  }\n                },\n                redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo\n              });\n            case 7:\n              _yield$_request = _context6.sent;\n              error = _yield$_request.error;\n              return _context6.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: error\n              });\n            case 10:\n              if (!('phone' in credentials)) {\n                _context6.next = 17;\n                break;\n              }\n              phone = credentials.phone, _options3 = credentials.options;\n              _context6.next = 14;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/otp\"), {\n                headers: this.headers,\n                body: {\n                  phone: phone,\n                  data: (_c = _options3 === null || _options3 === void 0 ? void 0 : _options3.data) !== null && _c !== void 0 ? _c : {},\n                  create_user: (_d = _options3 === null || _options3 === void 0 ? void 0 : _options3.shouldCreateUser) !== null && _d !== void 0 ? _d : true,\n                  gotrue_meta_security: {\n                    captcha_token: _options3 === null || _options3 === void 0 ? void 0 : _options3.captchaToken\n                  }\n                }\n              });\n            case 14:\n              _yield$_request2 = _context6.sent;\n              _error = _yield$_request2.error;\n              return _context6.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: _error\n              });\n            case 17:\n              throw new AuthInvalidCredentialsError('You must provide either an email or phone number.');\n            case 20:\n              _context6.prev = 20;\n              _context6.t0 = _context6[\"catch\"](0);\n              if (!isAuthError(_context6.t0)) {\n                _context6.next = 24;\n                break;\n              }\n              return _context6.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: _context6.t0\n              });\n            case 24:\n              throw _context6.t0;\n            case 25:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 20]]);\n      }));\n    }\n    /**\n     * Log in a user given a User supplied OTP received via mobile.\n     */\n  }, {\n    key: \"verifyOtp\",\n    value: function verifyOtp(params) {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _yield$_request3, data, error, session, user;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return this._removeSession();\n            case 3:\n              _context7.next = 5;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/verify\"), {\n                headers: this.headers,\n                body: Object.assign(Object.assign({}, params), {\n                  gotrue_meta_security: {\n                    captcha_token: (_a = params.options) === null || _a === void 0 ? void 0 : _a.captchaToken\n                  }\n                }),\n                redirectTo: (_b = params.options) === null || _b === void 0 ? void 0 : _b.redirectTo,\n                xform: _sessionResponse\n              });\n            case 5:\n              _yield$_request3 = _context7.sent;\n              data = _yield$_request3.data;\n              error = _yield$_request3.error;\n              if (!error) {\n                _context7.next = 10;\n                break;\n              }\n              throw error;\n            case 10:\n              if (data) {\n                _context7.next = 12;\n                break;\n              }\n              throw 'An error occurred on token verification.';\n            case 12:\n              session = data.session;\n              user = data.user;\n              if (!(session === null || session === void 0 ? void 0 : session.access_token)) {\n                _context7.next = 18;\n                break;\n              }\n              _context7.next = 17;\n              return this._saveSession(session);\n            case 17:\n              this._notifyAllSubscribers('SIGNED_IN', session);\n            case 18:\n              return _context7.abrupt(\"return\", {\n                data: {\n                  user: user,\n                  session: session\n                },\n                error: null\n              });\n            case 21:\n              _context7.prev = 21;\n              _context7.t0 = _context7[\"catch\"](0);\n              if (!isAuthError(_context7.t0)) {\n                _context7.next = 25;\n                break;\n              }\n              return _context7.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: _context7.t0\n              });\n            case 25:\n              throw _context7.t0;\n            case 26:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[0, 21]]);\n      }));\n    }\n    /**\n     * Attempts a single-sign on using an enterprise Identity Provider. A\n     * successful SSO attempt will redirect the current page to the identity\n     * provider authorization page. The redirect URL is implementation and SSO\n     * protocol specific.\n     *\n     * You can use it by providing a SSO domain. Typically you can extract this\n     * domain by asking users for their email address. If this domain is\n     * registered on the Auth instance the redirect will use that organization's\n     * currently active SSO Identity Provider for the login.\n     *\n     * If you have built an organization-specific login page, you can use the\n     * organization's SSO Identity Provider UUID directly instead.\n     *\n     * This API is experimental and availability is conditional on correct\n     * settings on the Auth service.\n     *\n     * @experimental\n     */\n  }, {\n    key: \"signInWithSSO\",\n    value: function signInWithSSO(params) {\n      var _a, _b, _c;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _context8.next = 3;\n              return this._removeSession();\n            case 3:\n              _context8.next = 5;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/sso\"), {\n                body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, 'providerId' in params ? {\n                  provider_id: params.providerId\n                } : null), 'domain' in params ? {\n                  domain: params.domain\n                } : null), {\n                  redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : undefined\n                }), ((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken) ? {\n                  gotrue_meta_security: {\n                    captcha_token: params.options.captchaToken\n                  }\n                } : null), {\n                  skip_http_redirect: true\n                }),\n                headers: this.headers,\n                xform: _ssoResponse\n              });\n            case 5:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 8:\n              _context8.prev = 8;\n              _context8.t0 = _context8[\"catch\"](0);\n              if (!isAuthError(_context8.t0)) {\n                _context8.next = 12;\n                break;\n              }\n              return _context8.abrupt(\"return\", {\n                data: null,\n                error: _context8.t0\n              });\n            case 12:\n              throw _context8.t0;\n            case 13:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[0, 8]]);\n      }));\n    }\n    /**\n     * Returns the session, refreshing it if necessary.\n     * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n     */\n  }, {\n    key: \"getSession\",\n    value: function getSession() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var currentSession, maybeSession, hasExpired, _yield$this$_callRefr, session, error;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this.initializePromise;\n            case 2:\n              currentSession = null;\n              if (!this.persistSession) {\n                _context9.next = 16;\n                break;\n              }\n              _context9.next = 6;\n              return getItemAsync(this.storage, this.storageKey);\n            case 6:\n              maybeSession = _context9.sent;\n              if (!(maybeSession !== null)) {\n                _context9.next = 14;\n                break;\n              }\n              if (!this._isValidSession(maybeSession)) {\n                _context9.next = 12;\n                break;\n              }\n              currentSession = maybeSession;\n              _context9.next = 14;\n              break;\n            case 12:\n              _context9.next = 14;\n              return this._removeSession();\n            case 14:\n              _context9.next = 17;\n              break;\n            case 16:\n              currentSession = this.inMemorySession;\n            case 17:\n              if (currentSession) {\n                _context9.next = 19;\n                break;\n              }\n              return _context9.abrupt(\"return\", {\n                data: {\n                  session: null\n                },\n                error: null\n              });\n            case 19:\n              hasExpired = currentSession.expires_at ? currentSession.expires_at <= Date.now() / 1000 : false;\n              if (hasExpired) {\n                _context9.next = 22;\n                break;\n              }\n              return _context9.abrupt(\"return\", {\n                data: {\n                  session: currentSession\n                },\n                error: null\n              });\n            case 22:\n              _context9.next = 24;\n              return this._callRefreshToken(currentSession.refresh_token);\n            case 24:\n              _yield$this$_callRefr = _context9.sent;\n              session = _yield$this$_callRefr.session;\n              error = _yield$this$_callRefr.error;\n              if (!error) {\n                _context9.next = 29;\n                break;\n              }\n              return _context9.abrupt(\"return\", {\n                data: {\n                  session: null\n                },\n                error: error\n              });\n            case 29:\n              return _context9.abrupt(\"return\", {\n                data: {\n                  session: session\n                },\n                error: null\n              });\n            case 30:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n    }\n    /**\n     * Gets the current user details if there is an existing session.\n     * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n     */\n  }, {\n    key: \"getUser\",\n    value: function getUser(jwt) {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var _yield$this$getSessio, data, error;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.prev = 0;\n              if (jwt) {\n                _context10.next = 10;\n                break;\n              }\n              _context10.next = 4;\n              return this.getSession();\n            case 4:\n              _yield$this$getSessio = _context10.sent;\n              data = _yield$this$getSessio.data;\n              error = _yield$this$getSessio.error;\n              if (!error) {\n                _context10.next = 9;\n                break;\n              }\n              throw error;\n            case 9:\n              // Default to Authorization header if there is no existing session\n              jwt = (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n            case 10:\n              _context10.next = 12;\n              return _request(this.fetch, 'GET', \"\".concat(this.url, \"/user\"), {\n                headers: this.headers,\n                jwt: jwt,\n                xform: _userResponse\n              });\n            case 12:\n              return _context10.abrupt(\"return\", _context10.sent);\n            case 15:\n              _context10.prev = 15;\n              _context10.t0 = _context10[\"catch\"](0);\n              if (!isAuthError(_context10.t0)) {\n                _context10.next = 19;\n                break;\n              }\n              return _context10.abrupt(\"return\", {\n                data: {\n                  user: null\n                },\n                error: _context10.t0\n              });\n            case 19:\n              throw _context10.t0;\n            case 20:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[0, 15]]);\n      }));\n    }\n    /**\n     * Updates user data for a logged in user.\n     */\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(attributes) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var _yield$this$getSessio2, sessionData, sessionError, session, _yield$_request4, data, userError;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              _context11.next = 3;\n              return this.getSession();\n            case 3:\n              _yield$this$getSessio2 = _context11.sent;\n              sessionData = _yield$this$getSessio2.data;\n              sessionError = _yield$this$getSessio2.error;\n              if (!sessionError) {\n                _context11.next = 8;\n                break;\n              }\n              throw sessionError;\n            case 8:\n              if (sessionData.session) {\n                _context11.next = 10;\n                break;\n              }\n              throw new AuthSessionMissingError();\n            case 10:\n              session = sessionData.session;\n              _context11.next = 13;\n              return _request(this.fetch, 'PUT', \"\".concat(this.url, \"/user\"), {\n                headers: this.headers,\n                redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\n                body: attributes,\n                jwt: session.access_token,\n                xform: _userResponse\n              });\n            case 13:\n              _yield$_request4 = _context11.sent;\n              data = _yield$_request4.data;\n              userError = _yield$_request4.error;\n              if (!userError) {\n                _context11.next = 18;\n                break;\n              }\n              throw userError;\n            case 18:\n              session.user = data.user;\n              _context11.next = 21;\n              return this._saveSession(session);\n            case 21:\n              this._notifyAllSubscribers('USER_UPDATED', session);\n              return _context11.abrupt(\"return\", {\n                data: {\n                  user: session.user\n                },\n                error: null\n              });\n            case 25:\n              _context11.prev = 25;\n              _context11.t0 = _context11[\"catch\"](0);\n              if (!isAuthError(_context11.t0)) {\n                _context11.next = 29;\n                break;\n              }\n              return _context11.abrupt(\"return\", {\n                data: {\n                  user: null\n                },\n                error: _context11.t0\n              });\n            case 29:\n              throw _context11.t0;\n            case 30:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this, [[0, 25]]);\n      }));\n    }\n    /**\n     * Decodes a JWT (without performing any validation).\n     */\n  }, {\n    key: \"_decodeJWT\",\n    value: function _decodeJWT(jwt) {\n      return decodeJWTPayload(jwt);\n    }\n    /**\n     * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n     * If the refresh token or access token in the current session is invalid, an error will be thrown.\n     * @param currentSession The current session that minimally contains an access token and refresh token.\n     */\n  }, {\n    key: \"setSession\",\n    value: function setSession(currentSession) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var timeNow, expiresAt, hasExpired, session, payload, _yield$this$_callRefr2, refreshedSession, error, _yield$this$getUser, data, _error2;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              if (!(!currentSession.access_token || !currentSession.refresh_token)) {\n                _context12.next = 3;\n                break;\n              }\n              throw new AuthSessionMissingError();\n            case 3:\n              timeNow = Date.now() / 1000;\n              expiresAt = timeNow;\n              hasExpired = true;\n              session = null;\n              payload = decodeJWTPayload(currentSession.access_token);\n              if (payload.exp) {\n                expiresAt = payload.exp;\n                hasExpired = expiresAt <= timeNow;\n              }\n              if (!hasExpired) {\n                _context12.next = 22;\n                break;\n              }\n              _context12.next = 12;\n              return this._callRefreshToken(currentSession.refresh_token);\n            case 12:\n              _yield$this$_callRefr2 = _context12.sent;\n              refreshedSession = _yield$this$_callRefr2.session;\n              error = _yield$this$_callRefr2.error;\n              if (!error) {\n                _context12.next = 17;\n                break;\n              }\n              return _context12.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: error\n              });\n            case 17:\n              if (refreshedSession) {\n                _context12.next = 19;\n                break;\n              }\n              return _context12.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: null\n              });\n            case 19:\n              session = refreshedSession;\n              _context12.next = 33;\n              break;\n            case 22:\n              _context12.next = 24;\n              return this.getUser(currentSession.access_token);\n            case 24:\n              _yield$this$getUser = _context12.sent;\n              data = _yield$this$getUser.data;\n              _error2 = _yield$this$getUser.error;\n              if (!_error2) {\n                _context12.next = 29;\n                break;\n              }\n              throw _error2;\n            case 29:\n              session = {\n                access_token: currentSession.access_token,\n                refresh_token: currentSession.refresh_token,\n                user: data.user,\n                token_type: 'bearer',\n                expires_in: expiresAt - timeNow,\n                expires_at: expiresAt\n              };\n              _context12.next = 32;\n              return this._saveSession(session);\n            case 32:\n              this._notifyAllSubscribers('SIGNED_IN', session);\n            case 33:\n              return _context12.abrupt(\"return\", {\n                data: {\n                  user: session.user,\n                  session: session\n                },\n                error: null\n              });\n            case 36:\n              _context12.prev = 36;\n              _context12.t0 = _context12[\"catch\"](0);\n              if (!isAuthError(_context12.t0)) {\n                _context12.next = 40;\n                break;\n              }\n              return _context12.abrupt(\"return\", {\n                data: {\n                  session: null,\n                  user: null\n                },\n                error: _context12.t0\n              });\n            case 40:\n              throw _context12.t0;\n            case 41:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this, [[0, 36]]);\n      }));\n    }\n    /**\n     * Returns a new session, regardless of expiry status.\n     * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n     * If the current session's refresh token is invalid, an error will be thrown.\n     * @param currentSession The current session. If passed in, it must contain a refresh token.\n     */\n  }, {\n    key: \"refreshSession\",\n    value: function refreshSession(currentSession) {\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var _yield$this$getSessio3, data, _error3, _yield$this$_callRefr3, session, error;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.prev = 0;\n              if (currentSession) {\n                _context13.next = 10;\n                break;\n              }\n              _context13.next = 4;\n              return this.getSession();\n            case 4:\n              _yield$this$getSessio3 = _context13.sent;\n              data = _yield$this$getSessio3.data;\n              _error3 = _yield$this$getSessio3.error;\n              if (!_error3) {\n                _context13.next = 9;\n                break;\n              }\n              throw _error3;\n            case 9:\n              currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;\n            case 10:\n              if (currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token) {\n                _context13.next = 12;\n                break;\n              }\n              throw new AuthSessionMissingError();\n            case 12:\n              _context13.next = 14;\n              return this._callRefreshToken(currentSession.refresh_token);\n            case 14:\n              _yield$this$_callRefr3 = _context13.sent;\n              session = _yield$this$_callRefr3.session;\n              error = _yield$this$_callRefr3.error;\n              if (!error) {\n                _context13.next = 19;\n                break;\n              }\n              return _context13.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: error\n              });\n            case 19:\n              if (session) {\n                _context13.next = 21;\n                break;\n              }\n              return _context13.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: null\n              });\n            case 21:\n              return _context13.abrupt(\"return\", {\n                data: {\n                  user: session.user,\n                  session: session\n                },\n                error: null\n              });\n            case 24:\n              _context13.prev = 24;\n              _context13.t0 = _context13[\"catch\"](0);\n              if (!isAuthError(_context13.t0)) {\n                _context13.next = 28;\n                break;\n              }\n              return _context13.abrupt(\"return\", {\n                data: {\n                  user: null,\n                  session: null\n                },\n                error: _context13.t0\n              });\n            case 28:\n              throw _context13.t0;\n            case 29:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this, [[0, 24]]);\n      }));\n    }\n    /**\n     * Gets the session data from a URL string\n     */\n  }, {\n    key: \"_getSessionFromUrl\",\n    value: function _getSessionFromUrl() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var error_description, error_code, _error4, provider_token, provider_refresh_token, access_token, expires_in, refresh_token, token_type, timeNow, expires_at, _yield$this$getUser2, data, error, user, session, redirectType;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.prev = 0;\n              if (isBrowser()) {\n                _context14.next = 3;\n                break;\n              }\n              throw new AuthImplicitGrantRedirectError('No browser detected.');\n            case 3:\n              if (this._isImplicitGrantFlow()) {\n                _context14.next = 5;\n                break;\n              }\n              throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.');\n            case 5:\n              error_description = getParameterByName('error_description');\n              if (!error_description) {\n                _context14.next = 14;\n                break;\n              }\n              error_code = getParameterByName('error_code');\n              if (error_code) {\n                _context14.next = 10;\n                break;\n              }\n              throw new AuthImplicitGrantRedirectError('No error_code detected.');\n            case 10:\n              _error4 = getParameterByName('error');\n              if (_error4) {\n                _context14.next = 13;\n                break;\n              }\n              throw new AuthImplicitGrantRedirectError('No error detected.');\n            case 13:\n              throw new AuthImplicitGrantRedirectError(error_description, {\n                error: _error4,\n                code: error_code\n              });\n            case 14:\n              provider_token = getParameterByName('provider_token');\n              provider_refresh_token = getParameterByName('provider_refresh_token');\n              access_token = getParameterByName('access_token');\n              if (access_token) {\n                _context14.next = 19;\n                break;\n              }\n              throw new AuthImplicitGrantRedirectError('No access_token detected.');\n            case 19:\n              expires_in = getParameterByName('expires_in');\n              if (expires_in) {\n                _context14.next = 22;\n                break;\n              }\n              throw new AuthImplicitGrantRedirectError('No expires_in detected.');\n            case 22:\n              refresh_token = getParameterByName('refresh_token');\n              if (refresh_token) {\n                _context14.next = 25;\n                break;\n              }\n              throw new AuthImplicitGrantRedirectError('No refresh_token detected.');\n            case 25:\n              token_type = getParameterByName('token_type');\n              if (token_type) {\n                _context14.next = 28;\n                break;\n              }\n              throw new AuthImplicitGrantRedirectError('No token_type detected.');\n            case 28:\n              timeNow = Math.round(Date.now() / 1000);\n              expires_at = timeNow + parseInt(expires_in);\n              _context14.next = 32;\n              return this.getUser(access_token);\n            case 32:\n              _yield$this$getUser2 = _context14.sent;\n              data = _yield$this$getUser2.data;\n              error = _yield$this$getUser2.error;\n              if (!error) {\n                _context14.next = 37;\n                break;\n              }\n              throw error;\n            case 37:\n              user = data.user;\n              session = {\n                provider_token: provider_token,\n                provider_refresh_token: provider_refresh_token,\n                access_token: access_token,\n                expires_in: parseInt(expires_in),\n                expires_at: expires_at,\n                refresh_token: refresh_token,\n                token_type: token_type,\n                user: user\n              };\n              redirectType = getParameterByName('type'); // Remove tokens from URL\n              window.location.hash = '';\n              return _context14.abrupt(\"return\", {\n                data: {\n                  session: session,\n                  redirectType: redirectType\n                },\n                error: null\n              });\n            case 44:\n              _context14.prev = 44;\n              _context14.t0 = _context14[\"catch\"](0);\n              if (!isAuthError(_context14.t0)) {\n                _context14.next = 48;\n                break;\n              }\n              return _context14.abrupt(\"return\", {\n                data: {\n                  session: null,\n                  redirectType: null\n                },\n                error: _context14.t0\n              });\n            case 48:\n              throw _context14.t0;\n            case 49:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this, [[0, 44]]);\n      }));\n    }\n    /**\n     * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n     */\n  }, {\n    key: \"_isImplicitGrantFlow\",\n    value: function _isImplicitGrantFlow() {\n      return isBrowser() && (Boolean(getParameterByName('access_token')) || Boolean(getParameterByName('error_description')));\n    }\n    /**\n     * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n     * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n     *\n     * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n     * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n     */\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var _yield$this$getSessio4, data, sessionError, accessToken, _yield$this$admin$sig, error;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.getSession();\n            case 2:\n              _yield$this$getSessio4 = _context15.sent;\n              data = _yield$this$getSessio4.data;\n              sessionError = _yield$this$getSessio4.error;\n              if (!sessionError) {\n                _context15.next = 7;\n                break;\n              }\n              return _context15.abrupt(\"return\", {\n                error: sessionError\n              });\n            case 7:\n              accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;\n              if (!accessToken) {\n                _context15.next = 16;\n                break;\n              }\n              _context15.next = 11;\n              return this.admin.signOut(accessToken);\n            case 11:\n              _yield$this$admin$sig = _context15.sent;\n              error = _yield$this$admin$sig.error;\n              if (!error) {\n                _context15.next = 16;\n                break;\n              }\n              if (isAuthApiError(error) && (error.status === 404 || error.status === 401)) {\n                _context15.next = 16;\n                break;\n              }\n              return _context15.abrupt(\"return\", {\n                error: error\n              });\n            case 16:\n              _context15.next = 18;\n              return this._removeSession();\n            case 18:\n              this._notifyAllSubscribers('SIGNED_OUT', null);\n              return _context15.abrupt(\"return\", {\n                error: null\n              });\n            case 20:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n    }\n    /**\n     * Receive a notification every time an auth event happens.\n     * @param callback A callback function to be invoked when an auth event happens.\n     */\n  }, {\n    key: \"onAuthStateChange\",\n    value: function onAuthStateChange(callback) {\n      var _this2 = this;\n      var id = uuid();\n      var subscription = {\n        id: id,\n        callback: callback,\n        unsubscribe: function unsubscribe() {\n          _this2.stateChangeEmitters.delete(id);\n        }\n      };\n      this.stateChangeEmitters.set(id, subscription);\n      return {\n        data: {\n          subscription: subscription\n        }\n      };\n    }\n    /**\n     * Sends a password reset request to an email address.\n     * @param email The email address of the user.\n     * @param options.redirectTo The URL to send the user to after they click the password reset link.\n     * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n     */\n  }, {\n    key: \"resetPasswordForEmail\",\n    value: function resetPasswordForEmail(email) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.prev = 0;\n              _context16.next = 3;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/recover\"), {\n                body: {\n                  email: email,\n                  gotrue_meta_security: {\n                    captcha_token: options.captchaToken\n                  }\n                },\n                headers: this.headers,\n                redirectTo: options.redirectTo\n              });\n            case 3:\n              return _context16.abrupt(\"return\", _context16.sent);\n            case 6:\n              _context16.prev = 6;\n              _context16.t0 = _context16[\"catch\"](0);\n              if (!isAuthError(_context16.t0)) {\n                _context16.next = 10;\n                break;\n              }\n              return _context16.abrupt(\"return\", {\n                data: null,\n                error: _context16.t0\n              });\n            case 10:\n              throw _context16.t0;\n            case 11:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * Generates a new JWT.\n     * @param refreshToken A valid refresh token that was returned on login.\n     */\n  }, {\n    key: \"_refreshAccessToken\",\n    value: function _refreshAccessToken(refreshToken) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var _this3 = this;\n        var startedAt;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.prev = 0;\n              startedAt = Date.now(); // will attempt to refresh the token with exponential backoff\n              _context18.next = 4;\n              return retryable(function (attempt) {\n                return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n                  return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n                    while (1) switch (_context17.prev = _context17.next) {\n                      case 0:\n                        _context17.next = 2;\n                        return sleep(attempt * 200);\n                      case 2:\n                        _context17.next = 4;\n                        return _request(this.fetch, 'POST', \"\".concat(this.url, \"/token?grant_type=refresh_token\"), {\n                          body: {\n                            refresh_token: refreshToken\n                          },\n                          headers: this.headers,\n                          xform: _sessionResponse\n                        });\n                      case 4:\n                        return _context17.abrupt(\"return\", _context17.sent);\n                      case 5:\n                      case \"end\":\n                        return _context17.stop();\n                    }\n                  }, _callee17, this);\n                }));\n              }, function (attempt, _, result) {\n                return result && result.error && result.error instanceof AuthRetryableFetchError &&\n                // retryable only if the request can be sent before the backoff overflows the tick duration\n                Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION;\n              });\n            case 4:\n              return _context18.abrupt(\"return\", _context18.sent);\n            case 7:\n              _context18.prev = 7;\n              _context18.t0 = _context18[\"catch\"](0);\n              if (!isAuthError(_context18.t0)) {\n                _context18.next = 11;\n                break;\n              }\n              return _context18.abrupt(\"return\", {\n                data: {\n                  session: null,\n                  user: null\n                },\n                error: _context18.t0\n              });\n            case 11:\n              throw _context18.t0;\n            case 12:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, null, [[0, 7]]);\n      }));\n    }\n  }, {\n    key: \"_isValidSession\",\n    value: function _isValidSession(maybeSession) {\n      var isValidSession = typeof maybeSession === 'object' && maybeSession !== null && 'access_token' in maybeSession && 'refresh_token' in maybeSession && 'expires_at' in maybeSession;\n      return isValidSession;\n    }\n  }, {\n    key: \"_handleProviderSignIn\",\n    value: function _handleProviderSignIn(provider) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var url = this._getUrlForProvider(provider, {\n        redirectTo: options.redirectTo,\n        scopes: options.scopes,\n        queryParams: options.queryParams\n      });\n      // try to open on the browser\n      if (isBrowser() && !options.skipBrowserRedirect) {\n        window.location.assign(url);\n      }\n      return {\n        data: {\n          provider: provider,\n          url: url\n        },\n        error: null\n      };\n    }\n    /**\n     * Recovers the session from LocalStorage and refreshes\n     * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n     */\n  }, {\n    key: \"_recoverAndRefresh\",\n    value: function _recoverAndRefresh() {\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var currentSession, timeNow, _yield$this$_callRefr4, error;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.prev = 0;\n              _context19.next = 3;\n              return getItemAsync(this.storage, this.storageKey);\n            case 3:\n              currentSession = _context19.sent;\n              if (this._isValidSession(currentSession)) {\n                _context19.next = 9;\n                break;\n              }\n              if (!(currentSession !== null)) {\n                _context19.next = 8;\n                break;\n              }\n              _context19.next = 8;\n              return this._removeSession();\n            case 8:\n              return _context19.abrupt(\"return\");\n            case 9:\n              timeNow = Math.round(Date.now() / 1000);\n              if (!(((_a = currentSession.expires_at) !== null && _a !== void 0 ? _a : Infinity) < timeNow + EXPIRY_MARGIN)) {\n                _context19.next = 26;\n                break;\n              }\n              if (!(this.autoRefreshToken && currentSession.refresh_token)) {\n                _context19.next = 22;\n                break;\n              }\n              _context19.next = 14;\n              return this._callRefreshToken(currentSession.refresh_token);\n            case 14:\n              _yield$this$_callRefr4 = _context19.sent;\n              error = _yield$this$_callRefr4.error;\n              if (!error) {\n                _context19.next = 20;\n                break;\n              }\n              console.log(error.message);\n              _context19.next = 20;\n              return this._removeSession();\n            case 20:\n              _context19.next = 24;\n              break;\n            case 22:\n              _context19.next = 24;\n              return this._removeSession();\n            case 24:\n              _context19.next = 30;\n              break;\n            case 26:\n              if (!this.persistSession) {\n                _context19.next = 29;\n                break;\n              }\n              _context19.next = 29;\n              return this._saveSession(currentSession);\n            case 29:\n              this._notifyAllSubscribers('SIGNED_IN', currentSession);\n            case 30:\n              _context19.next = 36;\n              break;\n            case 32:\n              _context19.prev = 32;\n              _context19.t0 = _context19[\"catch\"](0);\n              console.error(_context19.t0);\n              return _context19.abrupt(\"return\");\n            case 36:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this, [[0, 32]]);\n      }));\n    }\n  }, {\n    key: \"_callRefreshToken\",\n    value: function _callRefreshToken(refreshToken) {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var _yield$this$_refreshA, data, error, result, _result;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              if (!this.refreshingDeferred) {\n                _context20.next = 2;\n                break;\n              }\n              return _context20.abrupt(\"return\", this.refreshingDeferred.promise);\n            case 2:\n              _context20.prev = 2;\n              this.refreshingDeferred = new Deferred();\n              if (refreshToken) {\n                _context20.next = 6;\n                break;\n              }\n              throw new AuthSessionMissingError();\n            case 6:\n              _context20.next = 8;\n              return this._refreshAccessToken(refreshToken);\n            case 8:\n              _yield$this$_refreshA = _context20.sent;\n              data = _yield$this$_refreshA.data;\n              error = _yield$this$_refreshA.error;\n              if (!error) {\n                _context20.next = 13;\n                break;\n              }\n              throw error;\n            case 13:\n              if (data.session) {\n                _context20.next = 15;\n                break;\n              }\n              throw new AuthSessionMissingError();\n            case 15:\n              _context20.next = 17;\n              return this._saveSession(data.session);\n            case 17:\n              this._notifyAllSubscribers('TOKEN_REFRESHED', data.session);\n              result = {\n                session: data.session,\n                error: null\n              };\n              this.refreshingDeferred.resolve(result);\n              return _context20.abrupt(\"return\", result);\n            case 23:\n              _context20.prev = 23;\n              _context20.t0 = _context20[\"catch\"](2);\n              if (!isAuthError(_context20.t0)) {\n                _context20.next = 29;\n                break;\n              }\n              _result = {\n                session: null,\n                error: _context20.t0\n              };\n              (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(_result);\n              return _context20.abrupt(\"return\", _result);\n            case 29:\n              (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(_context20.t0);\n              throw _context20.t0;\n            case 31:\n              _context20.prev = 31;\n              this.refreshingDeferred = null;\n              return _context20.finish(31);\n            case 34:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this, [[2, 23, 31, 34]]);\n      }));\n    }\n  }, {\n    key: \"_notifyAllSubscribers\",\n    value: function _notifyAllSubscribers(event, session) {\n      var broadcast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (this.broadcastChannel && broadcast) {\n        this.broadcastChannel.postMessage({\n          event: event,\n          session: session\n        });\n      }\n      this.stateChangeEmitters.forEach(function (x) {\n        return x.callback(event, session);\n      });\n    }\n    /**\n     * set currentSession and currentUser\n     * process to _startAutoRefreshToken if possible\n     */\n  }, {\n    key: \"_saveSession\",\n    value: function _saveSession(session) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              if (!this.persistSession) {\n                this.inMemorySession = session;\n              }\n              if (!(this.persistSession && session.expires_at)) {\n                _context21.next = 4;\n                break;\n              }\n              _context21.next = 4;\n              return this._persistSession(session);\n            case 4:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }));\n    }\n  }, {\n    key: \"_persistSession\",\n    value: function _persistSession(currentSession) {\n      return setItemAsync(this.storage, this.storageKey, currentSession);\n    }\n  }, {\n    key: \"_removeSession\",\n    value: function _removeSession() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              if (!this.persistSession) {\n                _context22.next = 5;\n                break;\n              }\n              _context22.next = 3;\n              return removeItemAsync(this.storage, this.storageKey);\n            case 3:\n              _context22.next = 6;\n              break;\n            case 5:\n              this.inMemorySession = null;\n            case 6:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this);\n      }));\n    }\n    /**\n     * Removes any registered visibilitychange callback.\n     *\n     * {@see #startAutoRefresh}\n     * {@see #stopAutoRefresh}\n     */\n  }, {\n    key: \"_removeVisibilityChangedCallback\",\n    value: function _removeVisibilityChangedCallback() {\n      var callback = this.visibilityChangedCallback;\n      this.visibilityChangedCallback = null;\n      try {\n        if (callback && isBrowser() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {\n          window.removeEventListener('visibilitychange', callback);\n        }\n      } catch (e) {\n        console.error('removing visibilitychange callback failed', e);\n      }\n    }\n    /**\n     * This is the private implementation of {@link #startAutoRefresh}. Use this\n     * within the library.\n     */\n  }, {\n    key: \"_startAutoRefresh\",\n    value: function _startAutoRefresh() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n        var _this4 = this;\n        var ticker;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return this._stopAutoRefresh();\n            case 2:\n              ticker = setInterval(function () {\n                return _this4._autoRefreshTokenTick();\n              }, AUTO_REFRESH_TICK_DURATION);\n              this.autoRefreshTicker = ticker;\n              if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n                // ticker is a NodeJS Timeout object that has an `unref` method\n                // https://nodejs.org/api/timers.html#timeoutunref\n                // When auto refresh is used in NodeJS (like for testing) the\n                // `setInterval` is preventing the process from being marked as\n                // finished and tests run endlessly. This can be prevented by calling\n                // `unref()` on the returned object.\n                ticker.unref();\n              }\n              // run the tick immediately\n              _context23.next = 7;\n              return this._autoRefreshTokenTick();\n            case 7:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this);\n      }));\n    }\n    /**\n     * This is the private implementation of {@link #stopAutoRefresh}. Use this\n     * within the library.\n     */\n  }, {\n    key: \"_stopAutoRefresh\",\n    value: function _stopAutoRefresh() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n        var ticker;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              ticker = this.autoRefreshTicker;\n              this.autoRefreshTicker = null;\n              if (ticker) {\n                clearInterval(ticker);\n              }\n            case 3:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this);\n      }));\n    }\n    /**\n     * Starts an auto-refresh process in the background. The session is checked\n     * every few seconds. Close to the time of expiration a process is started to\n     * refresh the session. If refreshing fails it will be retried for as long as\n     * necessary.\n     *\n     * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n     * to call this function, it will be called for you.\n     *\n     * On browsers the refresh process works only when the tab/window is in the\n     * foreground to conserve resources as well as prevent race conditions and\n     * flooding auth with requests. If you call this method any managed\n     * visibility change callback will be removed and you must manage visibility\n     * changes on your own.\n     *\n     * On non-browser platforms the refresh process works *continuously* in the\n     * background, which may not be desireable. You should hook into your\n     * platform's foreground indication mechanism and call these methods\n     * appropriately to conserve resources.\n     *\n     * {@see #stopAutoRefresh}\n     */\n  }, {\n    key: \"startAutoRefresh\",\n    value: function startAutoRefresh() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              this._removeVisibilityChangedCallback();\n              _context25.next = 3;\n              return this._startAutoRefresh();\n            case 3:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this);\n      }));\n    }\n    /**\n     * Stops an active auto refresh process running in the background (if any).\n     *\n     * If you call this method any managed visibility change callback will be\n     * removed and you must manage visibility changes on your own.\n     *\n     * See {@link #startAutoRefresh} for more details.\n     */\n  }, {\n    key: \"stopAutoRefresh\",\n    value: function stopAutoRefresh() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              this._removeVisibilityChangedCallback();\n              _context26.next = 3;\n              return this._stopAutoRefresh();\n            case 3:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26, this);\n      }));\n    }\n    /**\n     * Runs the auto refresh token tick.\n     */\n  }, {\n    key: \"_autoRefreshTokenTick\",\n    value: function _autoRefreshTokenTick() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n        var now, _yield$this$getSessio5, session, expiresInTicks;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              now = Date.now();\n              _context27.prev = 1;\n              _context27.next = 4;\n              return this.getSession();\n            case 4:\n              _yield$this$getSessio5 = _context27.sent;\n              session = _yield$this$getSessio5.data.session;\n              if (!(!session || !session.refresh_token || !session.expires_at)) {\n                _context27.next = 8;\n                break;\n              }\n              return _context27.abrupt(\"return\");\n            case 8:\n              // session will expire in this many ticks (or has already expired if <= 0)\n              expiresInTicks = Math.floor((session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION);\n              if (!(expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD)) {\n                _context27.next = 12;\n                break;\n              }\n              _context27.next = 12;\n              return this._callRefreshToken(session.refresh_token);\n            case 12:\n              _context27.next = 17;\n              break;\n            case 14:\n              _context27.prev = 14;\n              _context27.t0 = _context27[\"catch\"](1);\n              console.error('Auto refresh tick failed with error. This is likely a transient error.', _context27.t0);\n            case 17:\n            case \"end\":\n              return _context27.stop();\n          }\n        }, _callee27, this, [[1, 14]]);\n      }));\n    }\n    /**\n     * Registers callbacks on the browser / platform, which in-turn run\n     * algorithms when the browser window/tab are in foreground. On non-browser\n     * platforms it assumes always foreground.\n     */\n  }, {\n    key: \"_handleVisibilityChange\",\n    value: function _handleVisibilityChange() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n        var _this5 = this;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) switch (_context29.prev = _context29.next) {\n            case 0:\n              if (!(!isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener))) {\n                _context29.next = 3;\n                break;\n              }\n              if (this.autoRefreshToken) {\n                // in non-browser environments the refresh token ticker runs always\n                this.startAutoRefresh();\n              }\n              return _context29.abrupt(\"return\", false);\n            case 3:\n              _context29.prev = 3;\n              this.visibilityChangedCallback = function () {\n                return __awaiter(_this5, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n                  return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n                    while (1) switch (_context28.prev = _context28.next) {\n                      case 0:\n                        _context28.next = 2;\n                        return this._onVisibilityChanged(false);\n                      case 2:\n                        return _context28.abrupt(\"return\", _context28.sent);\n                      case 3:\n                      case \"end\":\n                        return _context28.stop();\n                    }\n                  }, _callee28, this);\n                }));\n              };\n              window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', this.visibilityChangedCallback);\n              // now immediately call the visbility changed callback to setup with the\n              // current visbility state\n              _context29.next = 8;\n              return this._onVisibilityChanged(true);\n            case 8:\n              _context29.next = 13;\n              break;\n            case 10:\n              _context29.prev = 10;\n              _context29.t0 = _context29[\"catch\"](3);\n              console.error('_handleVisibilityChange', _context29.t0);\n            case 13:\n            case \"end\":\n              return _context29.stop();\n          }\n        }, _callee29, this, [[3, 10]]);\n      }));\n    }\n    /**\n     * Callback registered with `window.addEventListener('visibilitychange')`.\n     */\n  }, {\n    key: \"_onVisibilityChanged\",\n    value: function _onVisibilityChanged(isInitial) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              if (!(document.visibilityState === 'visible')) {\n                _context30.next = 9;\n                break;\n              }\n              if (isInitial) {\n                _context30.next = 6;\n                break;\n              }\n              _context30.next = 4;\n              return this.initializePromise;\n            case 4:\n              _context30.next = 6;\n              return this._recoverAndRefresh();\n            case 6:\n              if (this.autoRefreshToken) {\n                // in browser environments the refresh token ticker runs only on focused tabs\n                // which prevents race conditions\n                this._startAutoRefresh();\n              }\n              _context30.next = 10;\n              break;\n            case 9:\n              if (document.visibilityState === 'hidden') {\n                if (this.autoRefreshToken) {\n                  this._stopAutoRefresh();\n                }\n              }\n            case 10:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30, this);\n      }));\n    }\n    /**\n     * Generates the relevant login URL for a third-party provider.\n     * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n     * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n     */\n  }, {\n    key: \"_getUrlForProvider\",\n    value: function _getUrlForProvider(provider, options) {\n      var urlParams = [\"provider=\".concat(encodeURIComponent(provider))];\n      if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n        urlParams.push(\"redirect_to=\".concat(encodeURIComponent(options.redirectTo)));\n      }\n      if (options === null || options === void 0 ? void 0 : options.scopes) {\n        urlParams.push(\"scopes=\".concat(encodeURIComponent(options.scopes)));\n      }\n      if (options === null || options === void 0 ? void 0 : options.queryParams) {\n        var query = new URLSearchParams(options.queryParams);\n        urlParams.push(query.toString());\n      }\n      return \"\".concat(this.url, \"/authorize?\").concat(urlParams.join('&'));\n    }\n  }, {\n    key: \"_unenroll\",\n    value: function _unenroll(params) {\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n        var _yield$this$getSessio6, sessionData, sessionError;\n        return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n          while (1) switch (_context31.prev = _context31.next) {\n            case 0:\n              _context31.prev = 0;\n              _context31.next = 3;\n              return this.getSession();\n            case 3:\n              _yield$this$getSessio6 = _context31.sent;\n              sessionData = _yield$this$getSessio6.data;\n              sessionError = _yield$this$getSessio6.error;\n              if (!sessionError) {\n                _context31.next = 8;\n                break;\n              }\n              return _context31.abrupt(\"return\", {\n                data: null,\n                error: sessionError\n              });\n            case 8:\n              _context31.next = 10;\n              return _request(this.fetch, 'DELETE', \"\".concat(this.url, \"/factors/\").concat(params.factorId), {\n                headers: this.headers,\n                jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n              });\n            case 10:\n              return _context31.abrupt(\"return\", _context31.sent);\n            case 13:\n              _context31.prev = 13;\n              _context31.t0 = _context31[\"catch\"](0);\n              if (!isAuthError(_context31.t0)) {\n                _context31.next = 17;\n                break;\n              }\n              return _context31.abrupt(\"return\", {\n                data: null,\n                error: _context31.t0\n              });\n            case 17:\n              throw _context31.t0;\n            case 18:\n            case \"end\":\n              return _context31.stop();\n          }\n        }, _callee31, this, [[0, 13]]);\n      }));\n    }\n    /**\n     * {@see GoTrueMFAApi#enroll}\n     */\n  }, {\n    key: \"_enroll\",\n    value: function _enroll(params) {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n        var _yield$this$getSessio7, sessionData, sessionError, _yield$_request5, data, error;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.prev = 0;\n              _context32.next = 3;\n              return this.getSession();\n            case 3:\n              _yield$this$getSessio7 = _context32.sent;\n              sessionData = _yield$this$getSessio7.data;\n              sessionError = _yield$this$getSessio7.error;\n              if (!sessionError) {\n                _context32.next = 8;\n                break;\n              }\n              return _context32.abrupt(\"return\", {\n                data: null,\n                error: sessionError\n              });\n            case 8:\n              _context32.next = 10;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/factors\"), {\n                body: {\n                  friendly_name: params.friendlyName,\n                  factor_type: params.factorType,\n                  issuer: params.issuer\n                },\n                headers: this.headers,\n                jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n              });\n            case 10:\n              _yield$_request5 = _context32.sent;\n              data = _yield$_request5.data;\n              error = _yield$_request5.error;\n              if (!error) {\n                _context32.next = 15;\n                break;\n              }\n              return _context32.abrupt(\"return\", {\n                data: null,\n                error: error\n              });\n            case 15:\n              if ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code) {\n                data.totp.qr_code = \"data:image/svg+xml;utf-8,\".concat(data.totp.qr_code);\n              }\n              return _context32.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 19:\n              _context32.prev = 19;\n              _context32.t0 = _context32[\"catch\"](0);\n              if (!isAuthError(_context32.t0)) {\n                _context32.next = 23;\n                break;\n              }\n              return _context32.abrupt(\"return\", {\n                data: null,\n                error: _context32.t0\n              });\n            case 23:\n              throw _context32.t0;\n            case 24:\n            case \"end\":\n              return _context32.stop();\n          }\n        }, _callee32, this, [[0, 19]]);\n      }));\n    }\n    /**\n     * {@see GoTrueMFAApi#verify}\n     */\n  }, {\n    key: \"_verify\",\n    value: function _verify(params) {\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n        var _yield$this$getSessio8, sessionData, sessionError, _yield$_request6, data, error;\n        return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n          while (1) switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.prev = 0;\n              _context33.next = 3;\n              return this.getSession();\n            case 3:\n              _yield$this$getSessio8 = _context33.sent;\n              sessionData = _yield$this$getSessio8.data;\n              sessionError = _yield$this$getSessio8.error;\n              if (!sessionError) {\n                _context33.next = 8;\n                break;\n              }\n              return _context33.abrupt(\"return\", {\n                data: null,\n                error: sessionError\n              });\n            case 8:\n              _context33.next = 10;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/factors/\").concat(params.factorId, \"/verify\"), {\n                body: {\n                  code: params.code,\n                  challenge_id: params.challengeId\n                },\n                headers: this.headers,\n                jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n              });\n            case 10:\n              _yield$_request6 = _context33.sent;\n              data = _yield$_request6.data;\n              error = _yield$_request6.error;\n              if (!error) {\n                _context33.next = 15;\n                break;\n              }\n              return _context33.abrupt(\"return\", {\n                data: null,\n                error: error\n              });\n            case 15:\n              _context33.next = 17;\n              return this._saveSession(Object.assign({\n                expires_at: Math.round(Date.now() / 1000) + data.expires_in\n              }, data));\n            case 17:\n              this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data);\n              return _context33.abrupt(\"return\", {\n                data: data,\n                error: error\n              });\n            case 21:\n              _context33.prev = 21;\n              _context33.t0 = _context33[\"catch\"](0);\n              if (!isAuthError(_context33.t0)) {\n                _context33.next = 25;\n                break;\n              }\n              return _context33.abrupt(\"return\", {\n                data: null,\n                error: _context33.t0\n              });\n            case 25:\n              throw _context33.t0;\n            case 26:\n            case \"end\":\n              return _context33.stop();\n          }\n        }, _callee33, this, [[0, 21]]);\n      }));\n    }\n    /**\n     * {@see GoTrueMFAApi#challenge}\n     */\n  }, {\n    key: \"_challenge\",\n    value: function _challenge(params) {\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n        var _yield$this$getSessio9, sessionData, sessionError;\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) switch (_context34.prev = _context34.next) {\n            case 0:\n              _context34.prev = 0;\n              _context34.next = 3;\n              return this.getSession();\n            case 3:\n              _yield$this$getSessio9 = _context34.sent;\n              sessionData = _yield$this$getSessio9.data;\n              sessionError = _yield$this$getSessio9.error;\n              if (!sessionError) {\n                _context34.next = 8;\n                break;\n              }\n              return _context34.abrupt(\"return\", {\n                data: null,\n                error: sessionError\n              });\n            case 8:\n              _context34.next = 10;\n              return _request(this.fetch, 'POST', \"\".concat(this.url, \"/factors/\").concat(params.factorId, \"/challenge\"), {\n                headers: this.headers,\n                jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token\n              });\n            case 10:\n              return _context34.abrupt(\"return\", _context34.sent);\n            case 13:\n              _context34.prev = 13;\n              _context34.t0 = _context34[\"catch\"](0);\n              if (!isAuthError(_context34.t0)) {\n                _context34.next = 17;\n                break;\n              }\n              return _context34.abrupt(\"return\", {\n                data: null,\n                error: _context34.t0\n              });\n            case 17:\n              throw _context34.t0;\n            case 18:\n            case \"end\":\n              return _context34.stop();\n          }\n        }, _callee34, this, [[0, 13]]);\n      }));\n    }\n    /**\n     * {@see GoTrueMFAApi#challengeAndVerify}\n     */\n  }, {\n    key: \"_challengeAndVerify\",\n    value: function _challengeAndVerify(params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n        var _yield$this$_challeng, challengeData, challengeError;\n        return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n          while (1) switch (_context35.prev = _context35.next) {\n            case 0:\n              _context35.next = 2;\n              return this._challenge({\n                factorId: params.factorId\n              });\n            case 2:\n              _yield$this$_challeng = _context35.sent;\n              challengeData = _yield$this$_challeng.data;\n              challengeError = _yield$this$_challeng.error;\n              if (!challengeError) {\n                _context35.next = 7;\n                break;\n              }\n              return _context35.abrupt(\"return\", {\n                data: null,\n                error: challengeError\n              });\n            case 7:\n              _context35.next = 9;\n              return this._verify({\n                factorId: params.factorId,\n                challengeId: challengeData.id,\n                code: params.code\n              });\n            case 9:\n              return _context35.abrupt(\"return\", _context35.sent);\n            case 10:\n            case \"end\":\n              return _context35.stop();\n          }\n        }, _callee35, this);\n      }));\n    }\n    /**\n     * {@see GoTrueMFAApi#listFactors}\n     */\n  }, {\n    key: \"_listFactors\",\n    value: function _listFactors() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n        var _yield$this$getUser3, user, userError, factors, totp;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.next = 2;\n              return this.getUser();\n            case 2:\n              _yield$this$getUser3 = _context36.sent;\n              user = _yield$this$getUser3.data.user;\n              userError = _yield$this$getUser3.error;\n              if (!userError) {\n                _context36.next = 7;\n                break;\n              }\n              return _context36.abrupt(\"return\", {\n                data: null,\n                error: userError\n              });\n            case 7:\n              factors = (user === null || user === void 0 ? void 0 : user.factors) || [];\n              totp = factors.filter(function (factor) {\n                return factor.factor_type === 'totp' && factor.status === 'verified';\n              });\n              return _context36.abrupt(\"return\", {\n                data: {\n                  all: factors,\n                  totp: totp\n                },\n                error: null\n              });\n            case 10:\n            case \"end\":\n              return _context36.stop();\n          }\n        }, _callee36, this);\n      }));\n    }\n    /**\n     * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n     */\n  }, {\n    key: \"_getAuthenticatorAssuranceLevel\",\n    value: function _getAuthenticatorAssuranceLevel() {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n        var _yield$this$getSessio10, session, sessionError, payload, currentLevel, nextLevel, verifiedFactors, currentAuthenticationMethods;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) switch (_context37.prev = _context37.next) {\n            case 0:\n              _context37.next = 2;\n              return this.getSession();\n            case 2:\n              _yield$this$getSessio10 = _context37.sent;\n              session = _yield$this$getSessio10.data.session;\n              sessionError = _yield$this$getSessio10.error;\n              if (!sessionError) {\n                _context37.next = 7;\n                break;\n              }\n              return _context37.abrupt(\"return\", {\n                data: null,\n                error: sessionError\n              });\n            case 7:\n              if (session) {\n                _context37.next = 9;\n                break;\n              }\n              return _context37.abrupt(\"return\", {\n                data: {\n                  currentLevel: null,\n                  nextLevel: null,\n                  currentAuthenticationMethods: []\n                },\n                error: null\n              });\n            case 9:\n              payload = this._decodeJWT(session.access_token);\n              currentLevel = null;\n              if (payload.aal) {\n                currentLevel = payload.aal;\n              }\n              nextLevel = currentLevel;\n              verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter(function (factor) {\n                return factor.status === 'verified';\n              })) !== null && _b !== void 0 ? _b : [];\n              if (verifiedFactors.length > 0) {\n                nextLevel = 'aal2';\n              }\n              currentAuthenticationMethods = payload.amr || [];\n              return _context37.abrupt(\"return\", {\n                data: {\n                  currentLevel: currentLevel,\n                  nextLevel: nextLevel,\n                  currentAuthenticationMethods: currentAuthenticationMethods\n                },\n                error: null\n              });\n            case 17:\n            case \"end\":\n              return _context37.stop();\n          }\n        }, _callee37, this);\n      }));\n    }\n  }]);\n  return GoTrueClient;\n}();\nexport { GoTrueClient as default };","map":{"version":3,"mappings":"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","names":["GoTrueAdminApi","DEFAULT_HEADERS","EXPIRY_MARGIN","GOTRUE_URL","STORAGE_KEY","AuthImplicitGrantRedirectError","AuthInvalidCredentialsError","AuthRetryableFetchError","AuthSessionMissingError","AuthUnknownError","isAuthApiError","isAuthError","_request","_sessionResponse","_userResponse","_ssoResponse","decodeJWTPayload","Deferred","getItemAsync","getParameterByName","isBrowser","removeItemAsync","resolveFetch","setItemAsync","uuid","retryable","sleep","localStorageAdapter","polyfillGlobalThis","DEFAULT_OPTIONS","url","storageKey","autoRefreshToken","persistSession","detectSessionInUrl","headers","AUTO_REFRESH_TICK_DURATION","AUTO_REFRESH_TICK_THRESHOLD","GoTrueClient","options","Map","settings","inMemorySession","storage","admin","fetch","mfa","verify","_verify","bind","enroll","_enroll","unenroll","_unenroll","challenge","_challenge","listFactors","_listFactors","challengeAndVerify","_challengeAndVerify","getAuthenticatorAssuranceLevel","_getAuthenticatorAssuranceLevel","globalThis","BroadcastChannel","broadcastChannel","addEventListener","event","_notifyAllSubscribers","data","session","initialize","initializePromise","_initialize","_isImplicitGrantFlow","_getSessionFromUrl","error","_removeSession","redirectType","_saveSession","_recoverAndRefresh","_handleVisibilityChange","credentials","email","password","redirectTo","emailRedirectTo","body","gotrue_meta_security","captcha_token","captchaToken","xform","res","phone","user","_handleProviderSignIn","provider","scopes","queryParams","skipBrowserRedirect","token","nonce","id_token","create_user","shouldCreateUser","params","access_token","provider_id","providerId","domain","redirect_to","undefined","skip_http_redirect","currentSession","maybeSession","_isValidSession","hasExpired","expires_at","Date","now","_callRefreshToken","refresh_token","jwt","getSession","attributes","sessionData","sessionError","userError","timeNow","expiresAt","payload","exp","refreshedSession","getUser","token_type","expires_in","error_description","error_code","code","provider_token","provider_refresh_token","Math","round","parseInt","window","location","hash","Boolean","accessToken","signOut","status","callback","id","subscription","unsubscribe","stateChangeEmitters","delete","set","refreshToken","startedAt","attempt","__awaiter","_","result","isValidSession","_getUrlForProvider","assign","Infinity","console","log","message","refreshingDeferred","promise","_refreshAccessToken","resolve","reject","broadcast","postMessage","forEach","x","_persistSession","visibilityChangedCallback","removeEventListener","e","_stopAutoRefresh","ticker","setInterval","_autoRefreshTokenTick","autoRefreshTicker","unref","clearInterval","_removeVisibilityChangedCallback","_startAutoRefresh","expiresInTicks","floor","startAutoRefresh","_onVisibilityChanged","isInitial","document","visibilityState","urlParams","encodeURIComponent","push","query","URLSearchParams","toString","join","factorId","friendly_name","friendlyName","factor_type","factorType","issuer","totp","qr_code","challenge_id","challengeId","challengeData","challengeError","factors","filter","factor","all","currentLevel","nextLevel","currentAuthenticationMethods","_decodeJWT","aal","verifiedFactors","length","amr"],"sources":["/Users/atakan/Documents/Web Development/Udemy/Crash Course - Full Stack Web with React App/Projects/React - Today I Learned/today-i-learned/node_modules/@supabase/gotrue-js/src/GoTrueClient.ts"],"sourcesContent":["import GoTrueAdminApi from './GoTrueAdminApi'\nimport { DEFAULT_HEADERS, EXPIRY_MARGIN, GOTRUE_URL, STORAGE_KEY } from './lib/constants'\nimport {\n  AuthError,\n  AuthImplicitGrantRedirectError,\n  AuthInvalidCredentialsError,\n  AuthRetryableFetchError,\n  AuthSessionMissingError,\n  AuthUnknownError,\n  isAuthApiError,\n  isAuthError,\n} from './lib/errors'\nimport { Fetch, _request, _sessionResponse, _userResponse, _ssoResponse } from './lib/fetch'\nimport {\n  decodeJWTPayload,\n  Deferred,\n  getItemAsync,\n  getParameterByName,\n  isBrowser,\n  removeItemAsync,\n  resolveFetch,\n  setItemAsync,\n  uuid,\n  retryable,\n  sleep,\n} from './lib/helpers'\nimport localStorageAdapter from './lib/local-storage'\nimport { polyfillGlobalThis } from './lib/polyfills'\nimport type {\n  AuthChangeEvent,\n  AuthResponse,\n  CallRefreshTokenResult,\n  GoTrueClientOptions,\n  InitializeResult,\n  OAuthResponse,\n  SSOResponse,\n  Provider,\n  Session,\n  SignInWithIdTokenCredentials,\n  SignInWithOAuthCredentials,\n  SignInWithPasswordCredentials,\n  SignInWithPasswordlessCredentials,\n  SignUpWithPasswordCredentials,\n  SignInWithSSO,\n  Subscription,\n  SupportedStorage,\n  User,\n  UserAttributes,\n  UserResponse,\n  VerifyOtpParams,\n  GoTrueMFAApi,\n  MFAEnrollParams,\n  AuthMFAEnrollResponse,\n  MFAChallengeParams,\n  AuthMFAChallengeResponse,\n  MFAUnenrollParams,\n  AuthMFAUnenrollResponse,\n  MFAVerifyParams,\n  AuthMFAVerifyResponse,\n  AuthMFAListFactorsResponse,\n  AMREntry,\n  AuthMFAGetAuthenticatorAssuranceLevelResponse,\n  AuthenticatorAssuranceLevels,\n  Factor,\n  MFAChallengeAndVerifyParams,\n} from './lib/types'\n\npolyfillGlobalThis() // Make \"globalThis\" available\n\nconst DEFAULT_OPTIONS: Omit<Required<GoTrueClientOptions>, 'fetch' | 'storage'> = {\n  url: GOTRUE_URL,\n  storageKey: STORAGE_KEY,\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  headers: DEFAULT_HEADERS,\n}\n\n/** Current session will be checked for refresh at this interval. */\nconst AUTO_REFRESH_TICK_DURATION = 10 * 1000\n\n/**\n * A token refresh will be attempted this many ticks before the current session expires. */\nconst AUTO_REFRESH_TICK_THRESHOLD = 3\n\nexport default class GoTrueClient {\n  /**\n   * Namespace for the GoTrue admin methods.\n   * These methods should only be used in a trusted server-side environment.\n   */\n  admin: GoTrueAdminApi\n  /**\n   * Namespace for the MFA methods.\n   */\n  mfa: GoTrueMFAApi\n  /**\n   * The storage key used to identify the values saved in localStorage\n   */\n  protected storageKey: string\n\n  /**\n   * The session object for the currently logged in user. If null, it means there isn't a logged-in user.\n   * Only used if persistSession is false.\n   */\n  protected inMemorySession: Session | null\n\n  protected autoRefreshToken: boolean\n  protected persistSession: boolean\n  protected storage: SupportedStorage\n  protected stateChangeEmitters: Map<string, Subscription> = new Map()\n  protected autoRefreshTicker: ReturnType<typeof setInterval> | null = null\n  protected visibilityChangedCallback: (() => Promise<any>) | null = null\n  protected refreshingDeferred: Deferred<CallRefreshTokenResult> | null = null\n  /**\n   * Keeps track of the async client initialization.\n   * When null or not yet resolved the auth state is `unknown`\n   * Once resolved the the auth state is known and it's save to call any further client methods.\n   * Keep extra care to never reject or throw uncaught errors\n   */\n  protected initializePromise: Promise<InitializeResult> | null = null\n  protected detectSessionInUrl = true\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected fetch: Fetch\n\n  /**\n   * Used to broadcast state change events to other tabs listening.\n   */\n  protected broadcastChannel: BroadcastChannel | null = null\n\n  /**\n   * Create a new client for use in the browser.\n   */\n  constructor(options: GoTrueClientOptions) {\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n    this.inMemorySession = null\n    this.storageKey = settings.storageKey\n    this.autoRefreshToken = settings.autoRefreshToken\n    this.persistSession = settings.persistSession\n    this.storage = settings.storage || localStorageAdapter\n    this.admin = new GoTrueAdminApi({\n      url: settings.url,\n      headers: settings.headers,\n      fetch: settings.fetch,\n    })\n\n    this.url = settings.url\n    this.headers = settings.headers\n    this.fetch = resolveFetch(settings.fetch)\n    this.detectSessionInUrl = settings.detectSessionInUrl\n\n    this.mfa = {\n      verify: this._verify.bind(this),\n      enroll: this._enroll.bind(this),\n      unenroll: this._unenroll.bind(this),\n      challenge: this._challenge.bind(this),\n      listFactors: this._listFactors.bind(this),\n      challengeAndVerify: this._challengeAndVerify.bind(this),\n      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\n    }\n\n    if (isBrowser() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\n      this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey)\n      this.broadcastChannel.addEventListener('message', (event) => {\n        this._notifyAllSubscribers(event.data.event, event.data.session, false) // broadcast = false so we don't get an endless loop of messages\n      })\n    }\n\n    this.initialize()\n  }\n\n  /**\n   * Initializes the client session either from the url or from storage.\n   * This method is automatically called when instantiating the client, but should also be called\n   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\n   */\n  initialize(): Promise<InitializeResult> {\n    if (!this.initializePromise) {\n      this.initializePromise = this._initialize()\n    }\n\n    return this.initializePromise\n  }\n\n  /**\n   * IMPORTANT:\n   * 1. Never throw in this method, as it is called from the constructor\n   * 2. Never return a session from this method as it would be cached over\n   *    the whole lifetime of the client\n   */\n  private async _initialize(): Promise<InitializeResult> {\n    if (this.initializePromise) {\n      return this.initializePromise\n    }\n\n    try {\n      if (this.detectSessionInUrl && this._isImplicitGrantFlow()) {\n        const { data, error } = await this._getSessionFromUrl()\n\n        if (error) {\n          // failed login attempt via url,\n          // remove old session as in verifyOtp, signUp and signInWith*\n          await this._removeSession()\n\n          return { error }\n        }\n\n        const { session, redirectType } = data\n\n        await this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n        if (redirectType === 'recovery') {\n          this._notifyAllSubscribers('PASSWORD_RECOVERY', session)\n        }\n\n        return { error: null }\n      }\n\n      // no login attempt via callback url try to recover session from storage\n      await this._recoverAndRefresh()\n      return { error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { error }\n      }\n\n      return {\n        error: new AuthUnknownError('Unexpected error during initialization', error),\n      }\n    } finally {\n      await this._handleVisibilityChange()\n    }\n  }\n\n  /**\n   * Creates a new user.\n   *\n   * Be aware that if a user account exists in the system you may get back an\n   * error message that attempts to hide this information from the user.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUp(credentials: SignUpWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          redirectTo: options?.emailRedirectTo,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/signup`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n\n      const { data, error } = res\n\n      if (error || !data) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      const session: Session | null = data.session\n      const user: User | null = data.user\n\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user with an email and password or phone and password.\n   *\n   * Be aware that you may get back an error message that will not distingish\n   * between the cases where the account does not exist or that the\n   * email/phone and password combination is wrong or that the account can only\n   * be accessed via social login.\n   */\n  async signInWithPassword(credentials: SignInWithPasswordCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      let res: AuthResponse\n      if ('email' in credentials) {\n        const { email, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            email,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else if ('phone' in credentials) {\n        const { phone, password, options } = credentials\n        res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\n          headers: this.headers,\n          body: {\n            phone,\n            password,\n            data: options?.data ?? {},\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          xform: _sessionResponse,\n        })\n      } else {\n        throw new AuthInvalidCredentialsError(\n          'You must provide either an email or phone number and a password'\n        )\n      }\n      const { data, error } = res\n      if (error || !data) return { data: { user: null, session: null }, error }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in an existing user via a third-party provider.\n   */\n  async signInWithOAuth(credentials: SignInWithOAuthCredentials): Promise<OAuthResponse> {\n    await this._removeSession()\n    return this._handleProviderSignIn(credentials.provider, {\n      redirectTo: credentials.options?.redirectTo,\n      scopes: credentials.options?.scopes,\n      queryParams: credentials.options?.queryParams,\n      skipBrowserRedirect: credentials.options?.skipBrowserRedirect,\n    })\n  }\n\n  /**\n   * Allows signing in with an ID token issued by certain supported providers.\n   * The ID token is verified for validity and a new session is established.\n   *\n   * @experimental\n   */\n  async signInWithIdToken(credentials: SignInWithIdTokenCredentials): Promise<AuthResponse> {\n    await this._removeSession()\n\n    try {\n      const { options, provider, token, nonce } = credentials\n\n      const res = await _request(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\n        headers: this.headers,\n        body: {\n          provider,\n          id_token: token,\n          nonce,\n          gotrue_meta_security: { captcha_token: options?.captchaToken },\n        },\n        xform: _sessionResponse,\n      })\n\n      const { data, error } = res\n      if (error || !data) return { data: { user: null, session: null }, error }\n      if (data.session) {\n        await this._saveSession(data.session)\n        this._notifyAllSubscribers('SIGNED_IN', data.session)\n      }\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user using magiclink or a one-time password (OTP).\n   *\n   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\n   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\n   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\n   *\n   * Be aware that you may get back an error message that will not distinguish\n   * between the cases where the account does not exist or, that the account\n   * can only be accessed via social login.\n   */\n  async signInWithOtp(credentials: SignInWithPasswordlessCredentials): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      if ('email' in credentials) {\n        const { email, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            email,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n          redirectTo: options?.emailRedirectTo,\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      if ('phone' in credentials) {\n        const { phone, options } = credentials\n        const { error } = await _request(this.fetch, 'POST', `${this.url}/otp`, {\n          headers: this.headers,\n          body: {\n            phone,\n            data: options?.data ?? {},\n            create_user: options?.shouldCreateUser ?? true,\n            gotrue_meta_security: { captcha_token: options?.captchaToken },\n          },\n        })\n        return { data: { user: null, session: null }, error }\n      }\n      throw new AuthInvalidCredentialsError('You must provide either an email or phone number.')\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Log in a user given a User supplied OTP received via mobile.\n   */\n  async verifyOtp(params: VerifyOtpParams): Promise<AuthResponse> {\n    try {\n      await this._removeSession()\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/verify`, {\n        headers: this.headers,\n        body: {\n          ...params,\n          gotrue_meta_security: { captcha_token: params.options?.captchaToken },\n        },\n        redirectTo: params.options?.redirectTo,\n        xform: _sessionResponse,\n      })\n\n      if (error) {\n        throw error\n      }\n\n      if (!data) {\n        throw 'An error occurred on token verification.'\n      }\n\n      const session: Session | null = data.session\n      const user: User = data.user\n\n      if (session?.access_token) {\n        await this._saveSession(session as Session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Attempts a single-sign on using an enterprise Identity Provider. A\n   * successful SSO attempt will redirect the current page to the identity\n   * provider authorization page. The redirect URL is implementation and SSO\n   * protocol specific.\n   *\n   * You can use it by providing a SSO domain. Typically you can extract this\n   * domain by asking users for their email address. If this domain is\n   * registered on the Auth instance the redirect will use that organization's\n   * currently active SSO Identity Provider for the login.\n   *\n   * If you have built an organization-specific login page, you can use the\n   * organization's SSO Identity Provider UUID directly instead.\n   *\n   * This API is experimental and availability is conditional on correct\n   * settings on the Auth service.\n   *\n   * @experimental\n   */\n  async signInWithSSO(params: SignInWithSSO): Promise<SSOResponse> {\n    try {\n      await this._removeSession()\n\n      return await _request(this.fetch, 'POST', `${this.url}/sso`, {\n        body: {\n          ...('providerId' in params ? { provider_id: params.providerId } : null),\n          ...('domain' in params ? { domain: params.domain } : null),\n          redirect_to: params.options?.redirectTo ?? undefined,\n          ...(params?.options?.captchaToken\n            ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\n            : null),\n          skip_http_redirect: true, // fetch does not handle redirects\n        },\n        headers: this.headers,\n        xform: _ssoResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * Returns the session, refreshing it if necessary.\n   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\n   */\n  async getSession(): Promise<\n    | {\n        data: {\n          session: Session\n        }\n        error: null\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: AuthError\n      }\n    | {\n        data: {\n          session: null\n        }\n        error: null\n      }\n  > {\n    // make sure we've read the session from the url if there is one\n    // save to just await, as long we make sure _initialize() never throws\n    await this.initializePromise\n\n    let currentSession: Session | null = null\n\n    if (this.persistSession) {\n      const maybeSession = await getItemAsync(this.storage, this.storageKey)\n\n      if (maybeSession !== null) {\n        if (this._isValidSession(maybeSession)) {\n          currentSession = maybeSession\n        } else {\n          await this._removeSession()\n        }\n      }\n    } else {\n      currentSession = this.inMemorySession\n    }\n\n    if (!currentSession) {\n      return { data: { session: null }, error: null }\n    }\n\n    const hasExpired = currentSession.expires_at\n      ? currentSession.expires_at <= Date.now() / 1000\n      : false\n    if (!hasExpired) {\n      return { data: { session: currentSession }, error: null }\n    }\n\n    const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n    if (error) {\n      return { data: { session: null }, error }\n    }\n\n    return { data: { session }, error: null }\n  }\n\n  /**\n   * Gets the current user details if there is an existing session.\n   * @param jwt Takes in an optional access token jwt. If no jwt is provided, getUser() will attempt to get the jwt from the current session.\n   */\n  async getUser(jwt?: string): Promise<UserResponse> {\n    try {\n      if (!jwt) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        // Default to Authorization header if there is no existing session\n        jwt = data.session?.access_token ?? undefined\n      }\n\n      return await _request(this.fetch, 'GET', `${this.url}/user`, {\n        headers: this.headers,\n        jwt: jwt,\n        xform: _userResponse,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Updates user data for a logged in user.\n   */\n  async updateUser(\n    attributes: UserAttributes,\n    options: {\n      emailRedirectTo?: string | undefined\n    } = {}\n  ): Promise<UserResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        throw sessionError\n      }\n      if (!sessionData.session) {\n        throw new AuthSessionMissingError()\n      }\n      const session: Session = sessionData.session\n      const { data, error: userError } = await _request(this.fetch, 'PUT', `${this.url}/user`, {\n        headers: this.headers,\n        redirectTo: options?.emailRedirectTo,\n        body: attributes,\n        jwt: session.access_token,\n        xform: _userResponse,\n      })\n      if (userError) throw userError\n      session.user = data.user as User\n      await this._saveSession(session)\n      this._notifyAllSubscribers('USER_UPDATED', session)\n\n      return { data: { user: session.user }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Decodes a JWT (without performing any validation).\n   */\n  private _decodeJWT(jwt: string): {\n    exp?: number\n    aal?: AuthenticatorAssuranceLevels | null\n    amr?: AMREntry[] | null\n  } {\n    return decodeJWTPayload(jwt)\n  }\n\n  /**\n   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\n   * If the refresh token or access token in the current session is invalid, an error will be thrown.\n   * @param currentSession The current session that minimally contains an access token and refresh token.\n   */\n  async setSession(currentSession: {\n    access_token: string\n    refresh_token: string\n  }): Promise<AuthResponse> {\n    try {\n      if (!currentSession.access_token || !currentSession.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const timeNow = Date.now() / 1000\n      let expiresAt = timeNow\n      let hasExpired = true\n      let session: Session | null = null\n      const payload = decodeJWTPayload(currentSession.access_token)\n      if (payload.exp) {\n        expiresAt = payload.exp\n        hasExpired = expiresAt <= timeNow\n      }\n\n      if (hasExpired) {\n        const { session: refreshedSession, error } = await this._callRefreshToken(\n          currentSession.refresh_token\n        )\n        if (error) {\n          return { data: { user: null, session: null }, error: error }\n        }\n\n        if (!refreshedSession) {\n          return { data: { user: null, session: null }, error: null }\n        }\n        session = refreshedSession\n      } else {\n        const { data, error } = await this.getUser(currentSession.access_token)\n        if (error) {\n          throw error\n        }\n        session = {\n          access_token: currentSession.access_token,\n          refresh_token: currentSession.refresh_token,\n          user: data.user,\n          token_type: 'bearer',\n          expires_in: expiresAt - timeNow,\n          expires_at: expiresAt,\n        }\n        await this._saveSession(session)\n        this._notifyAllSubscribers('SIGNED_IN', session)\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Returns a new session, regardless of expiry status.\n   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\n   * If the current session's refresh token is invalid, an error will be thrown.\n   * @param currentSession The current session. If passed in, it must contain a refresh token.\n   */\n  async refreshSession(currentSession?: { refresh_token: string }): Promise<AuthResponse> {\n    try {\n      if (!currentSession) {\n        const { data, error } = await this.getSession()\n        if (error) {\n          throw error\n        }\n\n        currentSession = data.session ?? undefined\n      }\n\n      if (!currentSession?.refresh_token) {\n        throw new AuthSessionMissingError()\n      }\n\n      const { session, error } = await this._callRefreshToken(currentSession.refresh_token)\n      if (error) {\n        return { data: { user: null, session: null }, error: error }\n      }\n\n      if (!session) {\n        return { data: { user: null, session: null }, error: null }\n      }\n\n      return { data: { user: session.user, session }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { user: null, session: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Gets the session data from a URL string\n   */\n  private async _getSessionFromUrl(): Promise<\n    | {\n        data: { session: Session; redirectType: string | null }\n        error: null\n      }\n    | { data: { session: null; redirectType: null }; error: AuthError }\n  > {\n    try {\n      if (!isBrowser()) throw new AuthImplicitGrantRedirectError('No browser detected.')\n      if (!this._isImplicitGrantFlow()) {\n        throw new AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.')\n      }\n\n      const error_description = getParameterByName('error_description')\n      if (error_description) {\n        const error_code = getParameterByName('error_code')\n        if (!error_code) throw new AuthImplicitGrantRedirectError('No error_code detected.')\n        const error = getParameterByName('error')\n        if (!error) throw new AuthImplicitGrantRedirectError('No error detected.')\n\n        throw new AuthImplicitGrantRedirectError(error_description, { error, code: error_code })\n      }\n\n      const provider_token = getParameterByName('provider_token')\n      const provider_refresh_token = getParameterByName('provider_refresh_token')\n      const access_token = getParameterByName('access_token')\n      if (!access_token) throw new AuthImplicitGrantRedirectError('No access_token detected.')\n      const expires_in = getParameterByName('expires_in')\n      if (!expires_in) throw new AuthImplicitGrantRedirectError('No expires_in detected.')\n      const refresh_token = getParameterByName('refresh_token')\n      if (!refresh_token) throw new AuthImplicitGrantRedirectError('No refresh_token detected.')\n      const token_type = getParameterByName('token_type')\n      if (!token_type) throw new AuthImplicitGrantRedirectError('No token_type detected.')\n\n      const timeNow = Math.round(Date.now() / 1000)\n      const expires_at = timeNow + parseInt(expires_in)\n\n      const { data, error } = await this.getUser(access_token)\n      if (error) throw error\n      const user: User = data.user\n      const session: Session = {\n        provider_token,\n        provider_refresh_token,\n        access_token,\n        expires_in: parseInt(expires_in),\n        expires_at,\n        refresh_token,\n        token_type,\n        user,\n      }\n      const redirectType = getParameterByName('type')\n\n      // Remove tokens from URL\n      window.location.hash = ''\n\n      return { data: { session, redirectType }, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, redirectType: null }, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\n   */\n  private _isImplicitGrantFlow(): boolean {\n    return (\n      isBrowser() &&\n      (Boolean(getParameterByName('access_token')) ||\n        Boolean(getParameterByName('error_description')))\n    )\n  }\n\n  /**\n   * Inside a browser context, `signOut()` will remove the logged in user from the browser session\n   * and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\n   *\n   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\n   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\n   */\n  async signOut(): Promise<{ error: AuthError | null }> {\n    const { data, error: sessionError } = await this.getSession()\n    if (sessionError) {\n      return { error: sessionError }\n    }\n    const accessToken = data.session?.access_token\n    if (accessToken) {\n      const { error } = await this.admin.signOut(accessToken)\n      if (error) {\n        // ignore 404s since user might not exist anymore\n        // ignore 401s since an invalid or expired JWT should sign out the current session\n        if (!(isAuthApiError(error) && (error.status === 404 || error.status === 401))) {\n          return { error }\n        }\n      }\n    }\n    await this._removeSession()\n    this._notifyAllSubscribers('SIGNED_OUT', null)\n    return { error: null }\n  }\n\n  /**\n   * Receive a notification every time an auth event happens.\n   * @param callback A callback function to be invoked when an auth event happens.\n   */\n  onAuthStateChange(callback: (event: AuthChangeEvent, session: Session | null) => void): {\n    data: { subscription: Subscription }\n  } {\n    const id: string = uuid()\n    const subscription: Subscription = {\n      id,\n      callback,\n      unsubscribe: () => {\n        this.stateChangeEmitters.delete(id)\n      },\n    }\n\n    this.stateChangeEmitters.set(id, subscription)\n\n    return { data: { subscription } }\n  }\n\n  /**\n   * Sends a password reset request to an email address.\n   * @param email The email address of the user.\n   * @param options.redirectTo The URL to send the user to after they click the password reset link.\n   * @param options.captchaToken Verification token received when the user completes the captcha on the site.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<\n    | {\n        data: {}\n        error: null\n      }\n    | { data: null; error: AuthError }\n  > {\n    try {\n      return await _request(this.fetch, 'POST', `${this.url}/recover`, {\n        body: { email, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        headers: this.headers,\n        redirectTo: options.redirectTo,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n\n      throw error\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  private async _refreshAccessToken(refreshToken: string): Promise<AuthResponse> {\n    try {\n      const startedAt = Date.now()\n\n      // will attempt to refresh the token with exponential backoff\n      return await retryable(\n        async (attempt) => {\n          await sleep(attempt * 200) // 0, 200, 400, 800, ...\n\n          return await _request(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\n            body: { refresh_token: refreshToken },\n            headers: this.headers,\n            xform: _sessionResponse,\n          })\n        },\n        (attempt, _, result) =>\n          result &&\n          result.error &&\n          result.error instanceof AuthRetryableFetchError &&\n          // retryable only if the request can be sent before the backoff overflows the tick duration\n          Date.now() + (attempt + 1) * 200 - startedAt < AUTO_REFRESH_TICK_DURATION\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: { session: null, user: null }, error }\n      }\n      throw error\n    }\n  }\n\n  private _isValidSession(maybeSession: unknown): maybeSession is Session {\n    const isValidSession =\n      typeof maybeSession === 'object' &&\n      maybeSession !== null &&\n      'access_token' in maybeSession &&\n      'refresh_token' in maybeSession &&\n      'expires_at' in maybeSession\n\n    return isValidSession\n  }\n\n  private _handleProviderSignIn(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n      skipBrowserRedirect?: boolean\n    } = {}\n  ) {\n    const url: string = this._getUrlForProvider(provider, {\n      redirectTo: options.redirectTo,\n      scopes: options.scopes,\n      queryParams: options.queryParams,\n    })\n    // try to open on the browser\n    if (isBrowser() && !options.skipBrowserRedirect) {\n      window.location.assign(url)\n    }\n    return { data: { provider, url }, error: null }\n  }\n\n  /**\n   * Recovers the session from LocalStorage and refreshes\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\n   */\n  private async _recoverAndRefresh() {\n    try {\n      const currentSession = await getItemAsync(this.storage, this.storageKey)\n      if (!this._isValidSession(currentSession)) {\n        if (currentSession !== null) {\n          await this._removeSession()\n        }\n\n        return\n      }\n\n      const timeNow = Math.round(Date.now() / 1000)\n\n      if ((currentSession.expires_at ?? Infinity) < timeNow + EXPIRY_MARGIN) {\n        if (this.autoRefreshToken && currentSession.refresh_token) {\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\n\n          if (error) {\n            console.log(error.message)\n            await this._removeSession()\n          }\n        } else {\n          await this._removeSession()\n        }\n      } else {\n        if (this.persistSession) {\n          await this._saveSession(currentSession)\n        }\n        this._notifyAllSubscribers('SIGNED_IN', currentSession)\n      }\n    } catch (err) {\n      console.error(err)\n      return\n    }\n  }\n\n  private async _callRefreshToken(refreshToken: string): Promise<CallRefreshTokenResult> {\n    // refreshing is already in progress\n    if (this.refreshingDeferred) {\n      return this.refreshingDeferred.promise\n    }\n\n    try {\n      this.refreshingDeferred = new Deferred<CallRefreshTokenResult>()\n\n      if (!refreshToken) {\n        throw new AuthSessionMissingError()\n      }\n      const { data, error } = await this._refreshAccessToken(refreshToken)\n      if (error) throw error\n      if (!data.session) throw new AuthSessionMissingError()\n\n      await this._saveSession(data.session)\n      this._notifyAllSubscribers('TOKEN_REFRESHED', data.session)\n\n      const result = { session: data.session, error: null }\n\n      this.refreshingDeferred.resolve(result)\n\n      return result\n    } catch (error) {\n      if (isAuthError(error)) {\n        const result = { session: null, error }\n\n        this.refreshingDeferred?.resolve(result)\n\n        return result\n      }\n\n      this.refreshingDeferred?.reject(error)\n      throw error\n    } finally {\n      this.refreshingDeferred = null\n    }\n  }\n\n  private _notifyAllSubscribers(event: AuthChangeEvent, session: Session | null, broadcast = true) {\n    if (this.broadcastChannel && broadcast) {\n      this.broadcastChannel.postMessage({ event, session })\n    }\n\n    this.stateChangeEmitters.forEach((x) => x.callback(event, session))\n  }\n\n  /**\n   * set currentSession and currentUser\n   * process to _startAutoRefreshToken if possible\n   */\n  private async _saveSession(session: Session) {\n    if (!this.persistSession) {\n      this.inMemorySession = session\n    }\n\n    if (this.persistSession && session.expires_at) {\n      await this._persistSession(session)\n    }\n  }\n\n  private _persistSession(currentSession: Session) {\n    return setItemAsync(this.storage, this.storageKey, currentSession)\n  }\n\n  private async _removeSession() {\n    if (this.persistSession) {\n      await removeItemAsync(this.storage, this.storageKey)\n    } else {\n      this.inMemorySession = null\n    }\n  }\n\n  /**\n   * Removes any registered visibilitychange callback.\n   *\n   * {@see #startAutoRefresh}\n   * {@see #stopAutoRefresh}\n   */\n  private _removeVisibilityChangedCallback() {\n    const callback = this.visibilityChangedCallback\n    this.visibilityChangedCallback = null\n\n    try {\n      if (callback && isBrowser() && window?.removeEventListener) {\n        window.removeEventListener('visibilitychange', callback)\n      }\n    } catch (e) {\n      console.error('removing visibilitychange callback failed', e)\n    }\n  }\n\n  /**\n   * This is the private implementation of {@link #startAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _startAutoRefresh() {\n    await this._stopAutoRefresh()\n\n    const ticker = setInterval(() => this._autoRefreshTokenTick(), AUTO_REFRESH_TICK_DURATION)\n    this.autoRefreshTicker = ticker\n\n    if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\n      // ticker is a NodeJS Timeout object that has an `unref` method\n      // https://nodejs.org/api/timers.html#timeoutunref\n      // When auto refresh is used in NodeJS (like for testing) the\n      // `setInterval` is preventing the process from being marked as\n      // finished and tests run endlessly. This can be prevented by calling\n      // `unref()` on the returned object.\n      ticker.unref()\n    }\n\n    // run the tick immediately\n    await this._autoRefreshTokenTick()\n  }\n\n  /**\n   * This is the private implementation of {@link #stopAutoRefresh}. Use this\n   * within the library.\n   */\n  private async _stopAutoRefresh() {\n    const ticker = this.autoRefreshTicker\n    this.autoRefreshTicker = null\n\n    if (ticker) {\n      clearInterval(ticker)\n    }\n  }\n\n  /**\n   * Starts an auto-refresh process in the background. The session is checked\n   * every few seconds. Close to the time of expiration a process is started to\n   * refresh the session. If refreshing fails it will be retried for as long as\n   * necessary.\n   *\n   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\n   * to call this function, it will be called for you.\n   *\n   * On browsers the refresh process works only when the tab/window is in the\n   * foreground to conserve resources as well as prevent race conditions and\n   * flooding auth with requests. If you call this method any managed\n   * visibility change callback will be removed and you must manage visibility\n   * changes on your own.\n   *\n   * On non-browser platforms the refresh process works *continuously* in the\n   * background, which may not be desireable. You should hook into your\n   * platform's foreground indication mechanism and call these methods\n   * appropriately to conserve resources.\n   *\n   * {@see #stopAutoRefresh}\n   */\n  async startAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._startAutoRefresh()\n  }\n\n  /**\n   * Stops an active auto refresh process running in the background (if any).\n   *\n   * If you call this method any managed visibility change callback will be\n   * removed and you must manage visibility changes on your own.\n   *\n   * See {@link #startAutoRefresh} for more details.\n   */\n  async stopAutoRefresh() {\n    this._removeVisibilityChangedCallback()\n    await this._stopAutoRefresh()\n  }\n\n  /**\n   * Runs the auto refresh token tick.\n   */\n  private async _autoRefreshTokenTick() {\n    const now = Date.now()\n\n    try {\n      const {\n        data: { session },\n      } = await this.getSession()\n\n      if (!session || !session.refresh_token || !session.expires_at) {\n        return\n      }\n\n      // session will expire in this many ticks (or has already expired if <= 0)\n      const expiresInTicks = Math.floor(\n        (session.expires_at * 1000 - now) / AUTO_REFRESH_TICK_DURATION\n      )\n\n      if (expiresInTicks < AUTO_REFRESH_TICK_THRESHOLD) {\n        await this._callRefreshToken(session.refresh_token)\n      }\n    } catch (e: any) {\n      console.error('Auto refresh tick failed with error. This is likely a transient error.', e)\n    }\n  }\n\n  /**\n   * Registers callbacks on the browser / platform, which in-turn run\n   * algorithms when the browser window/tab are in foreground. On non-browser\n   * platforms it assumes always foreground.\n   */\n  private async _handleVisibilityChange() {\n    if (!isBrowser() || !window?.addEventListener) {\n      if (this.autoRefreshToken) {\n        // in non-browser environments the refresh token ticker runs always\n        this.startAutoRefresh()\n      }\n\n      return false\n    }\n\n    try {\n      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false)\n\n      window?.addEventListener('visibilitychange', this.visibilityChangedCallback)\n\n      // now immediately call the visbility changed callback to setup with the\n      // current visbility state\n      await this._onVisibilityChanged(true) // initial call\n    } catch (error) {\n      console.error('_handleVisibilityChange', error)\n    }\n  }\n\n  /**\n   * Callback registered with `window.addEventListener('visibilitychange')`.\n   */\n  private async _onVisibilityChanged(isInitial: boolean) {\n    if (document.visibilityState === 'visible') {\n      if (!isInitial) {\n        // initial visibility change setup is handled in another flow under #initialize()\n        await this.initializePromise\n        await this._recoverAndRefresh()\n      }\n\n      if (this.autoRefreshToken) {\n        // in browser environments the refresh token ticker runs only on focused tabs\n        // which prevents race conditions\n        this._startAutoRefresh()\n      }\n    } else if (document.visibilityState === 'hidden') {\n      if (this.autoRefreshToken) {\n        this._stopAutoRefresh()\n      }\n    }\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param options.scopes A space-separated list of scopes granted to the OAuth application.\n   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\n   */\n  private _getUrlForProvider(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    if (options?.queryParams) {\n      const query = new URLSearchParams(options.queryParams)\n      urlParams.push(query.toString())\n    }\n    return `${this.url}/authorize?${urlParams.join('&')}`\n  }\n\n  private async _unenroll(params: MFAUnenrollParams): Promise<AuthMFAUnenrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#enroll}\n   */\n  private async _enroll(params: MFAEnrollParams): Promise<AuthMFAEnrollResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(this.fetch, 'POST', `${this.url}/factors`, {\n        body: {\n          friendly_name: params.friendlyName,\n          factor_type: params.factorType,\n          issuer: params.issuer,\n        },\n        headers: this.headers,\n        jwt: sessionData?.session?.access_token,\n      })\n\n      if (error) {\n        return { data: null, error }\n      }\n\n      if (data?.totp?.qr_code) {\n        data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`\n      }\n\n      return { data, error: null }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#verify}\n   */\n  private async _verify(params: MFAVerifyParams): Promise<AuthMFAVerifyResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      const { data, error } = await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/verify`,\n        {\n          body: { code: params.code, challenge_id: params.challengeId },\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n      if (error) {\n        return { data: null, error }\n      }\n\n      await this._saveSession({\n        expires_at: Math.round(Date.now() / 1000) + data.expires_in,\n        ...data,\n      })\n      this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data)\n\n      return { data, error }\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challenge}\n   */\n  private async _challenge(params: MFAChallengeParams): Promise<AuthMFAChallengeResponse> {\n    try {\n      const { data: sessionData, error: sessionError } = await this.getSession()\n      if (sessionError) {\n        return { data: null, error: sessionError }\n      }\n\n      return await _request(\n        this.fetch,\n        'POST',\n        `${this.url}/factors/${params.factorId}/challenge`,\n        {\n          headers: this.headers,\n          jwt: sessionData?.session?.access_token,\n        }\n      )\n    } catch (error) {\n      if (isAuthError(error)) {\n        return { data: null, error }\n      }\n      throw error\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#challengeAndVerify}\n   */\n  private async _challengeAndVerify(\n    params: MFAChallengeAndVerifyParams\n  ): Promise<AuthMFAVerifyResponse> {\n    const { data: challengeData, error: challengeError } = await this._challenge({\n      factorId: params.factorId,\n    })\n    if (challengeError) {\n      return { data: null, error: challengeError }\n    }\n    return await this._verify({\n      factorId: params.factorId,\n      challengeId: challengeData.id,\n      code: params.code,\n    })\n  }\n\n  /**\n   * {@see GoTrueMFAApi#listFactors}\n   */\n  private async _listFactors(): Promise<AuthMFAListFactorsResponse> {\n    const {\n      data: { user },\n      error: userError,\n    } = await this.getUser()\n    if (userError) {\n      return { data: null, error: userError }\n    }\n\n    const factors = user?.factors || []\n    const totp = factors.filter(\n      (factor) => factor.factor_type === 'totp' && factor.status === 'verified'\n    )\n\n    return {\n      data: {\n        all: factors,\n        totp,\n      },\n      error: null,\n    }\n  }\n\n  /**\n   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\n   */\n  private async _getAuthenticatorAssuranceLevel(): Promise<AuthMFAGetAuthenticatorAssuranceLevelResponse> {\n    const {\n      data: { session },\n      error: sessionError,\n    } = await this.getSession()\n    if (sessionError) {\n      return { data: null, error: sessionError }\n    }\n    if (!session) {\n      return {\n        data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\n        error: null,\n      }\n    }\n\n    const payload = this._decodeJWT(session.access_token)\n\n    let currentLevel: AuthenticatorAssuranceLevels | null = null\n\n    if (payload.aal) {\n      currentLevel = payload.aal\n    }\n\n    let nextLevel: AuthenticatorAssuranceLevels | null = currentLevel\n\n    const verifiedFactors =\n      session.user.factors?.filter((factor: Factor) => factor.status === 'verified') ?? []\n\n    if (verifiedFactors.length > 0) {\n      nextLevel = 'aal2'\n    }\n\n    const currentAuthenticationMethods = payload.amr || []\n\n    return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}